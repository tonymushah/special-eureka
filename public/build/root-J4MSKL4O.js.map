{
  "version": 3,
  "sources": ["../../app/root.tsx"],
  "sourcesContent": ["// root.tsx\nimport React, { useContext, useEffect } from 'react'\nimport { withEmotionCache } from '@emotion/react'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from '@remix-run/react'\nimport { MetaFunction, LinksFunction } from '@remix-run/node' // Depends on the runtime you choose\n\nimport { ServerStyleContext, ClientStyleContext } from './context'\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'New Remix App',\n  viewport: 'width=device-width,initial-scale=1',\n});\n\nexport let links: LinksFunction = () => {\n  return [\n    { rel: 'preconnect', href: 'https://fonts.googleapis.com' },\n    { rel: 'preconnect', href: 'https://fonts.gstatic.com' },\n    {\n      rel: 'stylesheet',\n      href: 'https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap'\n    },\n  ]\n}\n\ninterface DocumentProps {\n  children: React.ReactNode;\n}\n\nconst Document = withEmotionCache(\n  ({ children }: DocumentProps, emotionCache) => {\n    const serverStyleData = useContext(ServerStyleContext);\n    const clientStyleData = useContext(ClientStyleContext);\n\n    // Only executed on client\n    useEffect(() => {\n      // re-link sheet container\n      emotionCache.sheet.container = document.head;\n      // re-inject tags\n      const tags = emotionCache.sheet.tags;\n      emotionCache.sheet.flush();\n      tags.forEach((tag) => {\n        (emotionCache.sheet as any)._insertTag(tag);\n      });\n      // reset cache to reapply global styles\n      clientStyleData?.reset();\n    }, []);\n\n    return (\n      <html lang=\"en\">\n        <head>\n          <Meta />\n          <Links />\n          {serverStyleData?.map(({ key, ids, css }) => (\n            <style\n              key={key}\n              data-emotion={`${key} ${ids.join(' ')}`}\n              dangerouslySetInnerHTML={{ __html: css }}\n            />\n          ))}\n        </head>\n        <body>\n          {children}\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </body>\n      </html>\n    );\n  }\n);"],
  "mappings": ";;;;;;;;;;;;;;;;;AACA,mBAA6C;AAC7C,IAAAA,gBAAiC;AAFjC;AAgBO,IAAM,OAAqB,OAAO;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AACZ;AAEO,IAAI,QAAuB,MAAM;AACtC,SAAO;AAAA,IACL,EAAE,KAAK,cAAc,MAAM,+BAA+B;AAAA,IAC1D,EAAE,KAAK,cAAc,MAAM,4BAA4B;AAAA,IACvD;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF;AACF;AAMA,IAAM,eAAW;AAAA,EACf,CAAC,EAAE,SAAS,GAAkB,iBAAiB;AAC7C,UAAM,sBAAkB,yBAAW,kBAAkB;AACrD,UAAM,sBAAkB,yBAAW,kBAAkB;AAGrD,gCAAU,MAAM;AAEd,mBAAa,MAAM,YAAY,SAAS;AAExC,YAAM,OAAO,aAAa,MAAM;AAChC,mBAAa,MAAM,MAAM;AACzB,WAAK,QAAQ,CAAC,QAAQ;AACpB,QAAC,aAAa,MAAc,WAAW,GAAG;AAAA,MAC5C,CAAC;AAED,uBAAiB,MAAM;AAAA,IACzB,GAAG,CAAC,CAAC;AAEL,WACE,mDAAC;AAAA,MAAK,MAAK;AAAA,MACT;AAAA,2DAAC;AAAA,UACC;AAAA,+DAAC,UAAD;AAAA;AAAA;AAAA;AAAA,mBAAM;AAAA,YACN,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,mBAAO;AAAA,YACN,iBAAiB,IAAI,CAAC,EAAE,KAAK,KAAK,IAAI,MACrC,mDAAC;AAAA,cAEC,gBAAc,GAAG,OAAO,IAAI,KAAK,GAAG;AAAA,cACpC,yBAAyB,EAAE,QAAQ,IAAI;AAAA,eAFlC,KADP;AAAA;AAAA;AAAA;AAAA,mBAIA,CACD;AAAA;AAAA,WATH;AAAA;AAAA;AAAA;AAAA,eAUA;AAAA,QACA,mDAAC;AAAA,UACE;AAAA;AAAA,YACD,mDAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,mBAAmB;AAAA,YACnB,mDAAC,aAAD;AAAA;AAAA;AAAA;AAAA,mBAAS;AAAA,YACT,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,mBAAY;AAAA;AAAA,WAJd;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA;AAAA,OAjBF;AAAA;AAAA;AAAA;AAAA,WAkBA;AAAA,EAEJ;AACF;",
  "names": ["import_react"]
}
