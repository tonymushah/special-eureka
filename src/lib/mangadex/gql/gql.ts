/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n\t\tquery recentlyAddedHome {\n\t\t\thome {\n\t\t\t\trecentlyUploaded {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\tpages\n\t\t\t\t\t\t\ttranslatedLanguage\n\t\t\t\t\t\t\treadableAt\n\t\t\t\t\t\t\tchapter\n\t\t\t\t\t\t\tvolume\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tscanlationGroups {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmanga {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t": types.RecentlyAddedHomeDocument,
    "\n\t\tquery homePopularTitle {\n\t\t\thome {\n\t\t\t\tpopularTitles {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\ttags {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontentRating\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tauthorArtists {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t": types.HomePopularTitleDocument,
    "\n\tquery recentlyAddedHomeQuery {\n\t\thome {\n\t\t\trecentlyAdded(params: { limit: 15 }) {\n\t\t\t\tdata {\n\t\t\t\t\tid\n\t\t\t\t\tattributes {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t}\n\t\t\t\t\trelationships {\n\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.RecentlyAddedHomeQueryDocument,
    "\n\tquery seasonal {\n\t\thome {\n\t\t\tseasonal {\n\t\t\t\tid\n\t\t\t\trelationships {\n\t\t\t\t\ttitles {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\taltTitles\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.SeasonalDocument,
    "\n  query staffPicks {\n    home {\n      staffPicks {\n        id\n        relationships {\n          titles {\n            id\n            attributes {\n              title\n              altTitles\n              state\n              description\n              status\n              availableTranslatedLanguages\n            }\n            relationships {\n              coverArt {\n                id\n                attributes {\n                  fileName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.StaffPicksDocument,
    "\n\t\t\t\t\tquery userMeOnSidebarFooter {\n\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\tme {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t": types.UserMeOnSidebarFooterDocument,
    "\n\t\t\tsubscription serverIconState($sub_id: UUID!) {\n\t\t\t\twatchIsAppMounted(subId: $sub_id)\n\t\t\t}\n\t\t": types.ServerIconStateDocument,
    "\n    subscription rtlSidebarSub($sub_id: UUID!) {\n        watchSidebarDirection(subId: $sub_id)\n    }\n": types.RtlSidebarSubDocument,
    "\n    subscription userMe($sub_id: UUID!) {\n        watchUserMe(subId: $sub_id) {\n            username\n            roles\n        }\n    }\n": types.UserMeDocument,
    "\n    subscription isLogged($sub_id: UUID!) {\n        watchIsLogged(subId: $sub_id)\n    }  \n": types.IsLoggedDocument,
    "\n\t\t\tquery coverImage(\n\t\t\t\t$cover_id: UUID!\n\t\t\t\t$manga_id: UUID!\n\t\t\t\t$filename: String!\n\t\t\t\t$mode: CoverImageQuality!\n\t\t\t) {\n\t\t\t\tcover {\n\t\t\t\t\tgetImage(\n\t\t\t\t\t\tcoverId: $cover_id\n\t\t\t\t\t\tmangaId: $manga_id\n\t\t\t\t\t\tfilename: $filename\n\t\t\t\t\t\tmode: $mode\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t": types.CoverImageDocument,
    "\n\t\t\t\tmutation mountAppState {\n\t\t\t\t\tofflineAppState {\n\t\t\t\t\t\tmountOfflineAppState\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t": types.MountAppStateDocument,
    "\n\t\t\t\tmutation unmountAppState {\n\t\t\t\t    offlineAppState {\n\t\t\t\t\t    unmountOfflineAppState\n\t\t\t\t    }\n\t\t\t    }\n\t\t\t": types.UnmountAppStateDocument,
    "\n    query getMangaTests($id: UUID!) {\n        manga {\n            get(id: $id) {\n            id\n            attributes {\n                title\n                altTitles\n                state\n                status\n                description\n                availableTranslatedLanguages\n                year\n                contentRating\n                links {\n                hasNoLinks\n                amazon\n                anilist\n                animePlanet\n                bookWalker\n                cdJapan\n                ebookJapan\n                englishTranslation\n                kitsu\n                mangaUpdates\n                myAnimeList\n                novelUpdates\n                raw\n                }\n                tags {\n                id\n                attributes {\n                    name\n                }\n                }\n            }\n            relationships {\n                authorArtists {\n                id\n                attributes {\n                    name\n                }\n                }\n                authors {\n                id\n                attributes {\n                    name\n                }\n                }\n                artists {\n                id\n                attributes {\n                    name\n                }\n                }\n                coverArt {\n                id\n                attributes {\n                    fileName\n                    locale\n                }\n                }\n                manga {\n                id\n                related\n                }\n            }\n            }\n        }\n        }\n": types.GetMangaTestsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\tquery recentlyAddedHome {\n\t\t\thome {\n\t\t\t\trecentlyUploaded {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\tpages\n\t\t\t\t\t\t\ttranslatedLanguage\n\t\t\t\t\t\t\treadableAt\n\t\t\t\t\t\t\tchapter\n\t\t\t\t\t\t\tvolume\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tscanlationGroups {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmanga {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t"): (typeof documents)["\n\t\tquery recentlyAddedHome {\n\t\t\thome {\n\t\t\t\trecentlyUploaded {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\tpages\n\t\t\t\t\t\t\ttranslatedLanguage\n\t\t\t\t\t\t\treadableAt\n\t\t\t\t\t\t\tchapter\n\t\t\t\t\t\t\tvolume\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tscanlationGroups {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmanga {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\tquery homePopularTitle {\n\t\t\thome {\n\t\t\t\tpopularTitles {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\ttags {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontentRating\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tauthorArtists {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t"): (typeof documents)["\n\t\tquery homePopularTitle {\n\t\t\thome {\n\t\t\t\tpopularTitles {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\ttags {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontentRating\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tauthorArtists {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery recentlyAddedHomeQuery {\n\t\thome {\n\t\t\trecentlyAdded(params: { limit: 15 }) {\n\t\t\t\tdata {\n\t\t\t\t\tid\n\t\t\t\t\tattributes {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t}\n\t\t\t\t\trelationships {\n\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery recentlyAddedHomeQuery {\n\t\thome {\n\t\t\trecentlyAdded(params: { limit: 15 }) {\n\t\t\t\tdata {\n\t\t\t\t\tid\n\t\t\t\t\tattributes {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t}\n\t\t\t\t\trelationships {\n\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery seasonal {\n\t\thome {\n\t\t\tseasonal {\n\t\t\t\tid\n\t\t\t\trelationships {\n\t\t\t\t\ttitles {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\taltTitles\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery seasonal {\n\t\thome {\n\t\t\tseasonal {\n\t\t\t\tid\n\t\t\t\trelationships {\n\t\t\t\t\ttitles {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\taltTitles\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query staffPicks {\n    home {\n      staffPicks {\n        id\n        relationships {\n          titles {\n            id\n            attributes {\n              title\n              altTitles\n              state\n              description\n              status\n              availableTranslatedLanguages\n            }\n            relationships {\n              coverArt {\n                id\n                attributes {\n                  fileName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query staffPicks {\n    home {\n      staffPicks {\n        id\n        relationships {\n          titles {\n            id\n            attributes {\n              title\n              altTitles\n              state\n              description\n              status\n              availableTranslatedLanguages\n            }\n            relationships {\n              coverArt {\n                id\n                attributes {\n                  fileName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\t\t\t\tquery userMeOnSidebarFooter {\n\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\tme {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t"): (typeof documents)["\n\t\t\t\t\tquery userMeOnSidebarFooter {\n\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\tme {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\t\tsubscription serverIconState($sub_id: UUID!) {\n\t\t\t\twatchIsAppMounted(subId: $sub_id)\n\t\t\t}\n\t\t"): (typeof documents)["\n\t\t\tsubscription serverIconState($sub_id: UUID!) {\n\t\t\t\twatchIsAppMounted(subId: $sub_id)\n\t\t\t}\n\t\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    subscription rtlSidebarSub($sub_id: UUID!) {\n        watchSidebarDirection(subId: $sub_id)\n    }\n"): (typeof documents)["\n    subscription rtlSidebarSub($sub_id: UUID!) {\n        watchSidebarDirection(subId: $sub_id)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    subscription userMe($sub_id: UUID!) {\n        watchUserMe(subId: $sub_id) {\n            username\n            roles\n        }\n    }\n"): (typeof documents)["\n    subscription userMe($sub_id: UUID!) {\n        watchUserMe(subId: $sub_id) {\n            username\n            roles\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    subscription isLogged($sub_id: UUID!) {\n        watchIsLogged(subId: $sub_id)\n    }  \n"): (typeof documents)["\n    subscription isLogged($sub_id: UUID!) {\n        watchIsLogged(subId: $sub_id)\n    }  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\t\tquery coverImage(\n\t\t\t\t$cover_id: UUID!\n\t\t\t\t$manga_id: UUID!\n\t\t\t\t$filename: String!\n\t\t\t\t$mode: CoverImageQuality!\n\t\t\t) {\n\t\t\t\tcover {\n\t\t\t\t\tgetImage(\n\t\t\t\t\t\tcoverId: $cover_id\n\t\t\t\t\t\tmangaId: $manga_id\n\t\t\t\t\t\tfilename: $filename\n\t\t\t\t\t\tmode: $mode\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t"): (typeof documents)["\n\t\t\tquery coverImage(\n\t\t\t\t$cover_id: UUID!\n\t\t\t\t$manga_id: UUID!\n\t\t\t\t$filename: String!\n\t\t\t\t$mode: CoverImageQuality!\n\t\t\t) {\n\t\t\t\tcover {\n\t\t\t\t\tgetImage(\n\t\t\t\t\t\tcoverId: $cover_id\n\t\t\t\t\t\tmangaId: $manga_id\n\t\t\t\t\t\tfilename: $filename\n\t\t\t\t\t\tmode: $mode\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\t\t\tmutation mountAppState {\n\t\t\t\t\tofflineAppState {\n\t\t\t\t\t\tmountOfflineAppState\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t"): (typeof documents)["\n\t\t\t\tmutation mountAppState {\n\t\t\t\t\tofflineAppState {\n\t\t\t\t\t\tmountOfflineAppState\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\t\t\tmutation unmountAppState {\n\t\t\t\t    offlineAppState {\n\t\t\t\t\t    unmountOfflineAppState\n\t\t\t\t    }\n\t\t\t    }\n\t\t\t"): (typeof documents)["\n\t\t\t\tmutation unmountAppState {\n\t\t\t\t    offlineAppState {\n\t\t\t\t\t    unmountOfflineAppState\n\t\t\t\t    }\n\t\t\t    }\n\t\t\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMangaTests($id: UUID!) {\n        manga {\n            get(id: $id) {\n            id\n            attributes {\n                title\n                altTitles\n                state\n                status\n                description\n                availableTranslatedLanguages\n                year\n                contentRating\n                links {\n                hasNoLinks\n                amazon\n                anilist\n                animePlanet\n                bookWalker\n                cdJapan\n                ebookJapan\n                englishTranslation\n                kitsu\n                mangaUpdates\n                myAnimeList\n                novelUpdates\n                raw\n                }\n                tags {\n                id\n                attributes {\n                    name\n                }\n                }\n            }\n            relationships {\n                authorArtists {\n                id\n                attributes {\n                    name\n                }\n                }\n                authors {\n                id\n                attributes {\n                    name\n                }\n                }\n                artists {\n                id\n                attributes {\n                    name\n                }\n                }\n                coverArt {\n                id\n                attributes {\n                    fileName\n                    locale\n                }\n                }\n                manga {\n                id\n                related\n                }\n            }\n            }\n        }\n        }\n"): (typeof documents)["\n    query getMangaTests($id: UUID!) {\n        manga {\n            get(id: $id) {\n            id\n            attributes {\n                title\n                altTitles\n                state\n                status\n                description\n                availableTranslatedLanguages\n                year\n                contentRating\n                links {\n                hasNoLinks\n                amazon\n                anilist\n                animePlanet\n                bookWalker\n                cdJapan\n                ebookJapan\n                englishTranslation\n                kitsu\n                mangaUpdates\n                myAnimeList\n                novelUpdates\n                raw\n                }\n                tags {\n                id\n                attributes {\n                    name\n                }\n                }\n            }\n            relationships {\n                authorArtists {\n                id\n                attributes {\n                    name\n                }\n                }\n                authors {\n                id\n                attributes {\n                    name\n                }\n                }\n                artists {\n                id\n                attributes {\n                    name\n                }\n                }\n                coverArt {\n                id\n                attributes {\n                    fileName\n                    locale\n                }\n                }\n                manga {\n                id\n                related\n                }\n            }\n            }\n        }\n        }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;