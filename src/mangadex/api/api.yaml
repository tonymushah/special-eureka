openapi: 3.0.3
tags:
  - name: Account
  - name: ApiClient
  - name: AtHome
  - name: Authentication
  - name: Author
  - name: Captcha
  - name: Chapter
  - name: Cover
  - name: CustomList
  - name: Feed
  - name: Follows
  - name: Forums
  - name: Infrastructure
  - name: Legacy
  - name: Manga
  - name: Rating
  - name: ReadMarker
  - name: Report
  - name: ScanlationGroup
  - name: Settings
  - name: Statistics
  - name: Upload
  - name: User
info:
  title: MangaDex API
  version: 5.10.0
  contact:
    name: MangaDex staff team
    email: "support@mangadex.org"
  description: |
    MangaDex is an ad-free manga reader offering high-quality images!

    This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.

    # Acceptable use policy

    Usage of our services implies acceptance of the following:
    - You **MUST** credit us
    - You **MUST** credit scanlation groups if you offer the ability to read chapters
    - You **CANNOT** run ads or paid services on your website and/or apps

    These may change at any time for any and no reason and it is up to you check for updates from time to time.

    # Security issues

    If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately.

servers:
  - url: 'https://api.mangadex.org'
    description: MangaDex Api
paths:
  /ping:
    get:
      operationId: get-ping
      summary: Ping healthcheck
      description: Returns a plaintext response containing only the word "pong" if the API is healthy
      tags:
        - Infrastructure
      security: []
      responses:
        '200':
          description: Pong
          content:
            text/plain:
              schema:
                type: string
                default: pong
  /manga:
    get:
      summary: Manga list
      tags:
        - Manga
      responses:
        '200':
          description: Manga list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-search-manga
      description: Search a list of Manga.
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
            pattern: ^\d+$
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
            pattern: ^\d+$
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: title
        - schema:
            type: string
            format: uuid
          in: query
          name: authorOrArtist
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: authors[]
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: artists[]
        - schema:
            oneOf:
              - type: integer
                pattern: ^\\d{4}$
              - type: string
                enum:
                  - none
          in: query
          name: year
          description: Year of release or none
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: includedTags[]
        - schema:
            type: string
            enum:
              - AND
              - OR
            default: AND
          in: query
          name: includedTagsMode
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: excludedTags[]
        - schema:
            type: string
            enum:
              - AND
              - OR
            default: OR
          in: query
          name: excludedTagsMode
        - schema:
            type: array
            items:
              type: string
              enum:
                - ongoing
                - completed
                - hiatus
                - cancelled
          in: query
          name: status[]
        - schema:
            type: array
            items:
              type: string
              pattern: ^[a-zA-Z\-]{2,5}$
          in: query
          name: originalLanguage[]
        - schema:
            type: array
            items:
              type: string
              pattern: ^[a-zA-Z\-]{2,5}$
          in: query
          name: excludedOriginalLanguage[]
        - schema:
            type: array
            items:
              type: string
              pattern: ^[a-zA-Z\-]{2,5}$
          in: query
          name: availableTranslatedLanguage[]
        - schema:
            type: array
            items:
              type: string
              enum:
                - shounen
                - shoujo
                - josei
                - seinen
                - none
          in: query
          name: publicationDemographic[]
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids[]
          description: Manga ids (limited to 100 per request)
        - schema:
            type: array
            default: [safe, suggestive, erotica]
            items:
              type: string
              enum:
                - safe
                - suggestive
                - erotica
                - pornographic
          in: query
          name: contentRating[]
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS in timezone UTC+0"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: createdAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS in timezone UTC+0"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: updatedAtSince
        - schema:
            type: object
            default:
              latestUploadedChapter: desc
            properties:
              title:
                type: string
                enum:
                  - asc
                  - desc
              year:
                type: string
                enum:
                  - asc
                  - desc
              createdAt:
                type: string
                enum:
                  - asc
                  - desc
              updatedAt:
                type: string
                enum:
                  - asc
                  - desc
              latestUploadedChapter:
                type: string
                enum:
                  - asc
                  - desc
              followedCount:
                type: string
                enum:
                  - asc
                  - desc
              relevance:
                type: string
                enum:
                  - asc
                  - desc
              rating:
                type: string
                enum:
                  - asc
                  - desc
          in: query
          name: order
          style: deepObject
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionManga'
          in: query
          name: includes[]
        - schema:
            type: string
            enum: ['0', '1', 'true', 'false']
          in: query
          name: hasAvailableChapters
        - schema:
            type: string
            format: uuid
          in: query
          name: group
      security: []
    post:
      summary: Create Manga
      operationId: post-manga
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: Manga Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MangaCreate'
        description: The size of the body is limited to 64KB.
      description: Create a new Manga.
      tags:
        - Manga
  '/manga/{id}/aggregate':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Manga ID
    get:
      operationId: get-manga-aggregate
      summary: Get Manga volumes & chapters
      security: []
      tags:
        - Manga
      parameters:
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: translatedLanguage[]
        - schema:
            type: array
            items:
              type: string
              format: uuid
              minLength: 36
              maxLength: 36
          in: query
          name: groups[]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: ok
                  volumes:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        volume:
                          type: string
                        count:
                          type: integer
                        chapters:
                          type: object
                          additionalProperties:
                            type: object
                            properties:
                              chapter:
                                type: string
                              id:
                                type: string
                                format: uuid
                              others:
                                type: array
                                items:
                                  type: string
                                  format: uuid
                              count:
                                type: integer
  '/manga/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Manga ID
    get:
      summary: Get Manga
      tags:
        - Manga
      parameters:
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionManga'
          in: query
          name: includes[]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Manga no content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-manga-id
      description: Get Manga.
      security: []
    put:
      summary: Update Manga
      operationId: put-manga-id
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/MangaEdit'
                - type: object
                  properties:
                    artists:
                      type: array
                      items:
                        type: string
                        format: uuid
                        minLength: 36
                        maxLength: 36
                    authors:
                      type: array
                      items:
                        type: string
                        format: uuid
                        minLength: 36
                        maxLength: 36
        description: The size of the body is limited to 64KB.
      tags:
        - Manga
    delete:
      summary: Delete Manga
      operationId: delete-manga-id
      responses:
        '200':
          description: Manga has been deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
  /auth/login:
    post:
      summary: Login
      tags:
        - Authentication
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: post-auth-login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        description: The size of the body is limited to 2KB.
      security: []
      deprecated: true
  /auth/check:
    get:
      summary: Check the set of permissions associated with the current token
      description: >
        The returned list of permissions is computed depending on the generic role permissions that the token user has,
        their personal overrides, and the OpenID scopes of the token (we do not offer granular token permissions yet)
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckResponse'
      operationId: get-auth-check
  /auth/logout:
    post:
      summary: Logout
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: post-auth-logout
      deprecated: true
  /auth/refresh:
    post:
      summary: Refresh token
      tags:
        - Authentication
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: post-auth-refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
        description: The size of the body is limited to 2KB.
      security: []
      deprecated: true
  /account/available:
    get:
      summary: Account username available
      operationId: get-account-available
      parameters:
        - schema:
            type: string
            minLength: 1
            maxLength: 64
            pattern: ^[a-zA-Z0-9_-]+$
          in: query
          required: true
          name: username
          description: Username to check for avaibility
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
      tags:
        - Account
      deprecated: true
  /account/create:
    post:
      summary: Create Account
      operationId: post-account-create
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
        description: The size of the body is limited to 4KB.
      tags:
        - Account
      deprecated: true
  '/account/activate/{code}':
    parameters:
      - schema:
          type: string
          pattern: '[0-9a-fA-F-]+'
        name: code
        in: path
        required: true
    post:
      summary: Activate account
      tags:
        - Account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-account-activate-code
      parameters: []
      security: []
      deprecated: true

  /client:
    get:
      operationId: get-list-apiclients
      summary: List own Api Clients
      tags:
        - ApiClient
      parameters:
        - name: limit
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
          in: query
        - name: offset
          schema:
            type: integer
            minimum: 0
          in: query
        - name: state
          schema:
            type: string
            enum:
              - requested
              - approved
              - rejected
              - autoapproved
          in: query
        - name: name
          schema:
            type: string
          in: query
        - name: includes[]
          schema:
            $ref: '#/components/schemas/ReferenceExpansionApiClient'
          in: query
        - name: order
          schema:
            type: object
            default:
              createdAt: desc
            properties:
              name:
                type: string
                enum:
                  - asc
                  - desc
              createdAt:
                type: string
                enum:
                  - asc
                  - desc
              updatedAt:
                type: string
                enum:
                  - asc
                  - desc
          in: query
          style: deepObject
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClientList'
    post:
      summary: Create ApiClient
      operationId: post-create-apiclient
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      tags:
        - ApiClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiClientCreate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClientResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /client/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ApiClient ID
    get:
      operationId: get-apiclient
      summary: Get Api Client by ID
      tags:
        - ApiClient
      parameters:
        - name: includes[]
          schema:
            $ref: '#/components/schemas/ReferenceExpansionApiClient'
          in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClientResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Edit ApiClient
      operationId: post-edit-apiclient
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      tags:
        - ApiClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiClientEdit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiClientResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: delete-apiclient
      summary: Delete Api Client
      tags:
        - ApiClient
      parameters:
        - name: version
          schema:
            type: string
            pattern: ^\d+$
          in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: ok
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /client/{id}/secret:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: ApiClient ID
    get:
      operationId: get-apiclient-secret
      summary: Get Secret for Client by ID
      tags:
        - ApiClient
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                  data:
                    type: string
        '403':
          description: Client not found, not active or user is not the owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Regenerate Client Secret
      operationId: post-regenerate-apiclient-secret
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      tags:
        - ApiClient
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                  data:
                    type: string
        '403':
          description: Client not found, not active or user is not the owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /group:
    get:
      summary: Scanlation Group list
      tags:
        - ScanlationGroup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanlationGroupList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-search-group
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids[]
          description: ScanlationGroup ids (limited to 100 per request)
        - schema:
            type: string
          in: query
          name: name
        - schema:
            type: string
          in: query
          name: focusedLanguage
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionScanlationGroup'
          in: query
          name: includes[]
        - schema:
            type: object
            default:
              latestUploadedChapter: desc
            properties:
              name:
                type: string
                enum:
                  - asc
                  - desc
              createdAt:
                type: string
                enum:
                  - asc
                  - desc
              updatedAt:
                type: string
                enum:
                  - asc
                  - desc
              followedCount:
                type: string
                enum:
                  - asc
                  - desc
              relevance:
                type: string
                enum:
                  - asc
                  - desc
          in: query
          name: order
          style: deepObject
      security: []
    post:
      summary: Create Scanlation Group
      operationId: post-group
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanlationGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ScanlationGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScanlationGroup'
        description: The size of the body is limited to 16KB.
  '/group/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Scanlation Group ID
    get:
      summary: Get Scanlation Group
      tags:
        - ScanlationGroup
      parameters:
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionScanlationGroup'
          in: query
          name: includes[]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanlationGroupResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: ScanlationGroup not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-group-id
      security: []
    put:
      summary: Update Scanlation Group
      operationId: put-group-id
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanlationGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ScanlationGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanlationGroupEdit'
        description: The size of the body is limited to 8KB.
    delete:
      summary: Delete Scanlation Group
      operationId: delete-group-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ScanlationGroup
  '/group/{id}/follow':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    post:
      summary: Follow Scanlation Group
      operationId: post-group-id-follow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ScanlationGroup
    delete:
      summary: Unfollow Scanlation Group
      operationId: delete-group-id-follow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ScanlationGroup
  /list:
    post:
      summary: Create CustomList
      operationId: post-list
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomListCreate'
        description: The size of the body is limited to 8KB.
  '/list/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: CustomList ID
    get:
      summary: Get CustomList
      tags:
        - CustomList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListResponse'
        '404':
          description: CustomList not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-list-id
      security: []
    put:
      summary: Update CustomList
      operationId: put-list-id
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomListEdit'
      description: The size of the body is limited to 8KB.
    delete:
      summary: Delete CustomList
      operationId: delete-list-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
  '/list/{id}/follow':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: CustomList ID
    post:
      summary: Follow CustomList
      operationId: follow-list-id
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
              examples:
                example:
                  value:
                    result: ok
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
      requestBody:
        content:
          application/json:
            schema:
              type: object
      description: The request body is empty
    delete:
      summary: Unfollow CustomList
      operationId: unfollow-list-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
              examples:
                example:
                  value:
                    result: ok
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
      requestBody:
        content:
          application/json:
            schema:
              type: object
      description: The request body is empty
  '/manga/{id}/list/{listId}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Manga ID
      - schema:
          type: string
          format: uuid
        name: listId
        in: path
        required: true
        description: CustomList ID
    post:
      summary: Add Manga in CustomList
      operationId: post-manga-id-list-listId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
    delete:
      summary: Remove Manga in CustomList
      operationId: delete-manga-id-list-listId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - CustomList
  /user/list:
    get:
      summary: Get logged User CustomList list
      tags:
        - CustomList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListList'
      operationId: get-user-list
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
      description: This will list public and private CustomList
  '/user/{id}/list':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: User ID
    get:
      summary: Get User's CustomList list
      tags:
        - CustomList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListList'
      operationId: get-user-id-list
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
      description: This will list only public CustomList
      security: []
  '/user':
    get:
      summary: User list
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
      operationId: get-user
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids[]
          description: User ids (limited to 100 per request)
        - schema:
            type: string
          in: query
          name: username
        - schema:
            type: object
            properties:
              username:
                type: string
                enum: ['asc', 'desc']
          in: query
          name: order
          style: deepObject
  '/user/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: User ID
    get:
      summary: Get User
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      operationId: get-user-id
      security: []
    delete:
      summary: Delete User
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      operationId: delete-user-id
      deprecated: true
  /user/delete/{code}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: code
        in: path
        required: true
        description: User delete code
    post:
      summary: Approve User deletion
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      operationId: post-user-delete-code
      security: []
      deprecated: true
  /user/password:
    post:
      summary: Update User password
      tags:
        - User
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      operationId: post-user-password
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                oldPassword:
                  type: string
                  minLength: 8
                  maxLength: 1024
                newPassword:
                  type: string
                  minLength: 8
                  maxLength: 1024
              required:
                - oldPassword
                - newPassword
  /user/email:
    post:
      summary: Update User email
      tags:
        - User
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      operationId: post-user-email
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
  /chapter:
    parameters: []
    get:
      summary: Chapter list
      description: Chapter list. If you want the Chapters of a given Manga, please check the feed endpoints.
      operationId: get-chapter
      responses:
        '200':
          description: Chapter list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids[]
          description: Chapter ids (limited to 100 per request)
        - schema:
            type: string
          in: query
          name: title
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: groups[]
        - schema:
            oneOf:
              - type: string
                format: uuid
              - type: array
                items:
                  type: string
                  format: uuid
          in: query
          name: uploader
        - schema:
            type: string
            format: uuid
          in: query
          name: manga
        - schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          in: query
          name: volume[]
        - schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
          in: query
          name: chapter
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: translatedLanguage[]
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: originalLanguage[]
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: excludedOriginalLanguage[]
        - schema:
            type: array
            default: [safe, suggestive, erotica]
            items:
              type: string
              enum:
                - safe
                - suggestive
                - erotica
                - pornographic
          in: query
          name: contentRating[]
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: excludedGroups[]
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: excludedUploaders[]
        - schema:
            type: string
            default: "1"
            enum: ["0", "1"]
          in: query
          name: includeFutureUpdates
        - schema: &triStateFilter
            type: integer
            enum: [0, 1]
          in: query
          name: includeEmptyPages
        - schema: *triStateFilter
          in: query
          name: includeFuturePublishAt
        - schema: *triStateFilter
          in: query
          name: includeExternalUrl
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS in timezone UTC+0"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: createdAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS in timezone UTC+0"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: updatedAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS in timezone UTC+0"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: publishAtSince
        - schema:
            type: object
            properties:
              createdAt:
                type: string
                enum:
                  - asc
                  - desc
              updatedAt:
                type: string
                enum:
                  - asc
                  - desc
              publishAt:
                type: string
                enum:
                  - asc
                  - desc
              readableAt:
                type: string
                enum:
                  - asc
                  - desc
              volume:
                type: string
                enum:
                  - asc
                  - desc
              chapter:
                type: string
                enum:
                  - asc
                  - desc
          in: query
          name: order
          style: deepObject
        - schema:
            type: array
            items:
              type: string
              enum:
                - manga
                - scanlation_group
                - user
          in: query
          name: includes
      tags:
        - Chapter
      security: []
  '/chapter/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Chapter ID
    get:
      summary: Get Chapter
      tags:
        - Chapter
      parameters:
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionChapter'
          in: query
          name: includes[]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Chapter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-chapter-id
      security: []
    put:
      summary: Update Chapter
      operationId: put-chapter-id
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterEdit'
        description: The size of the body is limited to 32KB.
      tags:
        - Chapter
    delete:
      summary: Delete Chapter
      operationId: delete-chapter-id
      responses:
        '200':
          description: Chapter has been deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Chapter
  /user/follows/manga/feed:
    get:
      summary: Get logged User followed Manga feed (Chapter list)
      tags:
        - Feed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-user-follows-manga-feed
      parameters: &feedParameters
        - schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 500
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: translatedLanguage[]
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: originalLanguage[]
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z\-]{2,5}$'
          in: query
          name: excludedOriginalLanguage[]
        - schema:
            type: array
            default: [safe, suggestive, erotica]
            items:
              type: string
              enum:
                - safe
                - suggestive
                - erotica
                - pornographic
          in: query
          name: contentRating[]
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: excludedGroups[]
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: excludedUploaders[]
        - schema:
            type: string
            default: "1"
            enum: ["0", "1"]
          in: query
          name: includeFutureUpdates
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS in timezone UTC+0"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: createdAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS in timezone UTC+0"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: updatedAtSince
        - schema:
            type: string
            description: "DateTime string with following format: YYYY-MM-DDTHH:MM:SS in timezone UTC+0"
            pattern: ^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$
          in: query
          name: publishAtSince
        - schema:
            type: object
            properties:
              createdAt:
                type: string
                enum:
                  - asc
                  - desc
              updatedAt:
                type: string
                enum:
                  - asc
                  - desc
              publishAt:
                type: string
                enum:
                  - asc
                  - desc
              readableAt:
                type: string
                enum:
                  - asc
                  - desc
              volume:
                type: string
                enum:
                  - asc
                  - desc
              chapter:
                type: string
                enum:
                  - asc
                  - desc
          in: query
          name: order
          style: deepObject
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionChapter'
          in: query
          name: includes[]
        - schema: *triStateFilter
          in: query
          name: includeEmptyPages
        - schema: *triStateFilter
          in: query
          name: includeFuturePublishAt
        - schema: *triStateFilter
          in: query
          name: includeExternalUrl
  /list/{id}/feed:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    get:
      summary: CustomList Manga feed
      tags:
        - Feed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-list-id-feed
      parameters: *feedParameters
      security: []
  '/manga/{id}/follow':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    delete:
      summary: Unfollow Manga
      operationId: delete-manga-id-follow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
    post:
      summary: Follow Manga
      operationId: post-manga-id-follow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
  /cover:
    get:
      summary: CoverArt list
      tags:
        - Cover
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-cover
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: manga[]
          description: Manga ids (limited to 100 per request)
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids[]
          description: Covers ids (limited to 100 per request)
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: uploaders[]
          description: User ids (limited to 100 per request)
        - schema:
            type: array
            items:
              type: string
              pattern: '^[a-z]{2}(-[a-z]{2})?$'
          in: query
          name: locales[]
          description: Locales of cover art (limited to 100 per request)
        - schema:
            type: object
            properties:
              createdAt:
                type: string
                enum:
                  - asc
                  - desc
              updatedAt:
                type: string
                enum:
                  - asc
                  - desc
              volume:
                type: string
                enum:
                  - asc
                  - desc
          in: query
          name: order
          style: deepObject
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionCoverArt'
          in: query
          name: includes[]
      security: []
  /cover/{mangaOrCoverId}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: mangaOrCoverId
        description: Is Manga UUID on POST
        in: path
        required: true
    post:
      summary: Upload Cover
      tags:
        - Cover
      operationId: upload-cover
      parameters:
        - schema:
            type: string
            default: multipart/form-data
          name: Content-Type
          in: header
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                volume:
                  type: string
                  nullable: true
                  pattern: ^(0|[1-9]\\d*)((\\.\\d+){1,2})?[a-z]?$
                  maxLength: 8
                description:
                  type: string
                  nullable: false
                locale:
                  type: string
                  nullable: false
                  pattern: ^[a-z]{2}(-[a-z]{2})?$
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get Cover
      tags:
        - Cover
      operationId: get-cover-id
      parameters:
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionCoverArt'
          in: query
          name: includes[]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: CoverArt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
    put:
      summary: Edit Cover
      tags:
        - Cover
      operationId: edit-cover
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoverEdit'
        description: The size of the body is limited to 2KB.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete Cover
      tags:
        - Cover
      operationId: delete-cover
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /author:
    get:
      summary: Author list
      tags:
        - Author
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-author
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids[]
          description: Author ids (limited to 100 per request)
        - schema:
            type: string
          in: query
          name: name
        - schema:
            type: object
            properties:
              name:
                type: string
                enum: ['asc', 'desc']
          in: query
          name: order
          style: deepObject
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionAuthor'
          in: query
          name: includes[]
      security: []
    post:
      summary: Create Author
      operationId: post-author
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorCreate'
        description: The size of the body is limited to 8KB.
  '/author/{id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Author ID
    get:
      summary: Get Author
      tags:
        - Author
      parameters:
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionAuthor'
          in: query
          name: includes[]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Author no content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-author-id
      security: []
    put:
      summary: Update Author
      operationId: put-author-id
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorEdit'
        description: The size of the body is limited to 8KB.
      tags:
        - Author
    delete:
      summary: Delete Author
      operationId: delete-author-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Author
  /legacy/mapping:
    post:
      summary: Legacy ID mapping
      operationId: post-legacy-mapping
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: This response will give you an array of mappings of resource identifiers ; the `data.attributes.newId` field corresponds to the new UUID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MappingIdResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Legacy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingIdBody'
        description: The size of the body is limited to 10KB.
      security: []
  /manga/{id}/feed:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Manga ID
    get:
      summary: Manga feed
      tags:
        - Manga
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-manga-id-feed
      parameters: *feedParameters
      security: []
  /manga/{id}/read:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    get:
      summary: Manga read markers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                  data:
                    type: array
                    items:
                      type: string
                      format: uuid
              examples:
                example-1:
                  value:
                    result: ok
                    data:
                      - 00057883-357b-4734-9469-52967e59ef4c
                      - 000b7978-d9bd-49ec-a8f6-a0737368415f
                      - 0015b621-a175-47f5-81fb-5976c88e18c4
      operationId: get-manga-chapter-readmarkers
      description: A list of chapter ids that are marked as read for the specified manga
      tags:
        - ReadMarker
    post:
      summary: Manga read markers batch
      parameters:
        - schema:
            type: boolean
          name: updateHistory
          in: query
          required: false
          description: Adding this will cause the chapter to be stored in the user's reading history
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterReadMarkerBatch'
        description: The size of the body is limited to 10KB.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
              examples:
                example:
                  value:
                    result: ok
      operationId: post-manga-chapter-readmarkers
      description: Send a lot of chapter ids for one manga to mark as read and/or unread
      tags:
        - ReadMarker
  /manga/read:
    get:
      summary: Manga read markers
      parameters:
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: ids[]
          description: Manga ids
          required: true
        - name: grouped
          in: query
          schema:
            type: boolean
          description: Group results by manga ids
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                  data:
                    oneOf:
                      - type: array
                        items:
                          type: string
                          format: uuid
                      - type: object
                        additionalProperties:
                          type: array
                          items:
                            type: string
                            format: uuid
              examples:
                example-default:
                  value:
                    result: ok
                    data:
                      - 00057883-357b-4734-9469-52967e59ef4c
                      - 000b7978-d9bd-49ec-a8f6-a0737368415f
                      - 0015b621-a175-47f5-81fb-5976c88e18c4
                example-grouped:
                  value:
                    result: ok
                    data:
                      40529c30-0d25-4da5-a25a-f71a961ab855:
                        - 00057883-357b-4734-9469-52967e59ef4c
                        - 000b7978-d9bd-49ec-a8f6-a0737368415f
                        - 0015b621-a175-47f5-81fb-5976c88e18c4
      operationId: get-manga-chapter-readmarkers-2
      description: A list of chapter ids that are marked as read for the given manga ids
      tags:
        - ReadMarker
  /manga/random:
    get:
      summary: Get a random Manga
      tags:
        - Manga
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
      operationId: get-manga-random
      parameters:
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionManga'
          in: query
          name: includes[]
        - schema:
            type: array
            default: [safe, suggestive, erotica]
            items:
              type: string
              enum:
                - safe
                - suggestive
                - erotica
                - pornographic
          in: query
          name: contentRating[]
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: includedTags[]
        - schema:
            type: string
            enum:
              - AND
              - OR
            default: AND
          in: query
          name: includedTagsMode
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: excludedTags[]
        - schema:
            type: string
            enum:
              - AND
              - OR
            default: OR
          in: query
          name: excludedTagsMode
      security: []
  '/at-home/server/{chapterId}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: chapterId
        in: path
        required: true
        description: Chapter ID
    get:
      summary: Get MangaDex@Home server URL
      tags:
        - AtHome
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: ok
                  baseUrl:
                    type: string
                    description: |-
                      The base URL to construct final image URLs from.
                      The URL returned is valid for the requested chapter only, and for a duration of 15 minutes from the time of the response.
                  chapter:
                    type: object
                    properties:
                      hash:
                        type: string
                      data:
                        type: array
                        items:
                          type: string
                      dataSaver:
                        type: array
                        items:
                          type: string
                example:
                  result: ok
                  baseUrl: https://abcdef.xyz123.mangadex.network:12345/some-temporary-access-token
                  chapter:
                    hash: d9786b687bc5f3fe1d4ae05ff05e0eb5
                    data:
                      - x1-b765e86d5ecbc932cf3f517a8604f6ac6d8a7f379b0277a117dc7c09c53d041e.png
                      - x2-fc7c198880083b053bf4e8aebfc0eec1adbe52878a6c5ff08d25544a1d5502ef.png
                      - x3-90f15bc8b91deb0dc88473b532e42a99f93ee9e2c8073795c81b01fff428af80.png
                    dataSaver:
                      - x1-ab2b7c8f30c843aa3a53c29bc8c0e204fba4ab3e75985d761921eb6a52ff6159.jpg
                      - x2-3e057d937e01696adce2ac2865f62f6f6a15f03cef43d929b88e99a4b8482e03.jpg
                      - x3-128742088f99806b022bbc8006554456f2a20d0d176d7f3264a65ff9a549d0dd.jpg
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-at-home-server-chapterId
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: forcePort443
          description: |-
            Force selecting from MangaDex@Home servers that use the standard HTTPS port 443.

            While the conventional port for HTTPS traffic is 443 and servers are encouraged to use it, it is not a hard requirement as it technically isn't
            anything special.

            However, some misbehaving school/office network will at time block traffic to non-standard ports, and setting this flag to `true` will ensure
            selection of a server that uses these.
      security: []
  /manga/tag:
    get:
      summary: Tag list
      tags:
        - Manga
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
      operationId: get-manga-tag
      security: []
  /account/activate/resend:
    post:
      summary: Resend Activation code
      operationId: post-account-activate-resend
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendAccountActivationCode'
        description: The size of the body is limited to 1KB.
      security: []
      deprecated: true
  /account/recover:
    post:
      summary: Recover given Account
      description: You can only request Account Recovery once per Hour for the same Email Address
      operationId: post-account-recover
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendAccountActivationCode'
        description: The size of the body is limited to 1KB.
      security: []
      deprecated: true
  '/account/recover/{code}':
    parameters:
      - schema:
          type: string
        name: code
        in: path
        required: true
    post:
      summary: Complete Account recover
      operationId: post-account-recover-code
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountActivateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoverCompleteBody'
        description: The size of the body is limited to 2KB.
      security: []
      deprecated: true
  /user/me:
    get:
      summary: Logged User details
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      operationId: get-user-me
  /user/follows/group:
    get:
      summary: Get logged User followed Groups
      tags:
        - Follows
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanlationGroupList'
      operationId: get-user-follows-group
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionScanlationGroup'
          in: query
          name: includes[]
  /user/follows/group/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        description: Scanlation Group id
        in: path
        required: true
    get:
      summary: Check if logged User follows a Group
      tags:
        - Follows
      responses:
        '200':
          description: The User follow that Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: The User doesn't follow that Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      operationId: get-user-follows-group-id
  /user/follows/user:
    get:
      summary: Get logged User followed User list
      tags:
        - Follows
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
      operationId: get-user-follows-user
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
  /user/follows/user/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        description: User id
        in: path
        required: true
    get:
      summary: Check if logged User follows a User
      tags:
        - Follows
      responses:
        '200':
          description: The User follow that User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: The User doesn't follow that User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      operationId: get-user-follows-user-id
  /user/follows/manga:
    get:
      summary: Get logged User followed Manga list
      tags:
        - Follows
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaList'
      operationId: get-user-follows-manga
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionManga'
          in: query
          name: includes[]
  /user/follows/manga/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        description: Manga id
        in: path
        required: true
    get:
      summary: Check if logged User follows a Manga
      tags:
        - Follows
      responses:
        '200':
          description: The User follow that Manga
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: The User doesn't follow that Manga
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      operationId: get-user-follows-manga-id
  /user/follows/list:
    get:
      summary: Get logged User followed CustomList list
      tags:
        - Follows
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomListList'
      operationId: get-user-follows-list
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
  /user/follows/list/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        description: CustomList id
        in: path
        required: true
    get:
      summary: Check if logged User follows a CustomList
      tags:
        - Follows
      responses:
        '200':
          description: The User follow that CustomList
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: The User doesn't follow that CustomList
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      operationId: get-user-follows-list-id
  /manga/status:
    get:
      summary: Get all Manga reading status for logged User
      operationId: get-manga-status
      tags:
        - Manga
      parameters:
        - schema:
            type: string
            enum:
              - reading
              - on_hold
              - plan_to_read
              - dropped
              - re_reading
              - completed
          in: query
          name: status
          description: Used to filter the list by given status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: ok
                  statuses:
                    type: object
                    additionalProperties:
                      type: string
                      enum:
                        - reading
                        - on_hold
                        - plan_to_read
                        - dropped
                        - re_reading
                        - completed
              examples:
                unfiltered:
                  summary: /manga/status
                  value:
                    result: ok
                    statuses:
                      b019ea5d-5fe6-44d4-abbc-f546f210884d: reading
                      2394a5c7-1d2e-461f-acde-18726b9e37d6: dropped
                filtered:
                  summary: /manga/status?status=reading
                  value:
                    result: ok
                    statuses:
                      b019ea5d-5fe6-44d4-abbc-f546f210884d: reading
  '/manga/{id}/status':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    get:
      summary: Get a Manga reading status
      operationId: get-manga-id-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: ok
                  status:
                    type: string
                    enum:
                      - reading
                      - on_hold
                      - plan_to_read
                      - dropped
                      - re_reading
                      - completed
                example:
                  result: ok
                  status: reading
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
    post:
      summary: Update Manga reading status
      operationId: post-manga-id-status
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMangaStatus'
        description: Using a `null` value in `status` field will remove the Manga reading status. The size of the body is limited to 2KB.

  /manga/draft/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
      - schema:
          $ref: '#/components/schemas/ReferenceExpansionManga'
        in: query
        name: includes[]
    get:
      summary: Get a specific Manga Draft
      operationId: get-manga-id-draft
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - Bearer: []
      tags:
        - Manga
  /manga/draft/{id}/commit:
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    post:
      summary: Submit a Manga Draft
      operationId: commit-manga-draft
      requestBody:
        content:
          application/json:
            schema:
              properties:
                version:
                  type: integer
                  minimum: 1
              additionalProperties: false
        description: A Manga Draft that is to be submitted must have at least one cover in the original language, must be in the "draft" state and must be passed the correct version in the request body.
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - Bearer: []
      tags:
        - Manga
  /manga/draft:
    get:
      summary: Get a list of Manga Drafts
      operationId: get-manga-drafts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - Bearer: []
      tags:
        - Manga
    parameters:
      - schema:
          type: integer
          default: 10
          minimum: 1
          maximum: 100
        in: query
        name: limit
      - schema:
          type: integer
          minimum: 0
        in: query
        name: offset
      - schema:
          type: string
          enum:
            - draft
            - submitted
            - rejected
        in: query
        name: state
      - schema:
          type: object
          default:
            createdAt: desc
          properties:
            title:
              type: string
              enum:
                - asc
                - desc
            year:
              type: string
              enum:
                - asc
                - desc
            createdAt:
              type: string
              enum:
                - asc
                - desc
            updatedAt:
              type: string
              enum:
                - asc
                - desc
        in: query
        name: order
        style: deepObject
      - schema:
          $ref: '#/components/schemas/ReferenceExpansionManga'
        in: query
        name: includes[]

  /captcha/solve:
    post:
      summary: Solve Captcha
      tags:
        - Captcha
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: 'OK: Captcha has been solved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                      - error
        '400':
          description: 'Bad Request: Captcha challenge result was wrong, the Captcha Verification service was down or other, refer to the error message and the errorCode inside the error context'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: post-captcha-solve
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                captchaChallenge:
                  type: string
                  minLength: 1
              required:
                - captchaChallenge
            examples:
              example-1:
                value:
                  captchaChallenge: string
      description: |-
        Captchas can be solved explicitly through this endpoint, another way is to add a `X-Captcha-Result` header to any request. The same logic will verify the captcha and is probably more convenient because it takes one less request.

        Authentication is optional. Captchas are tracked for both the client ip and for the user id, if you are logged in you want to send your session token but that is not required.
      security:
        - Bearer: []
  /report/reasons/{category}:
    parameters:
      - schema:
          type: string
          enum:
            - manga
            - chapter
            - scanlation_group
            - user
            - author
        name: category
        in: path
        required: true
    get:
      summary: Get a list of report reasons
      operationId: get-report-reasons-by-category
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: ok
                  response:
                    type: string
                    default: collection
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          default: report_reason
                        attributes:
                          type: object
                          properties:
                            reason:
                              $ref: '#/components/schemas/LocalizedString'
                            detailsRequired:
                              type: boolean
                            category:
                              type: string
                              enum:
                                - manga
                                - chapter
                                - scanlation_group
                                - user
                                - author
                            version:
                              type: integer
                              minimum: 1
                  limit:
                    type: integer
                  offset:
                    type: integer
                  total:
                    type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Report
  /report:
    get:
      summary: Get a list of reports by the user
      operationId: get-reports
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Report
      parameters:
        - schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: string
            enum:
              - manga
              - chapter
              - scanlation_group
              - user
              - author
          in: query
          name: category
        - schema:
            type: string
            format: uuid
            minLength: 36
            maxLength: 36
          in: query
          name: reasonId
        - schema:
            type: string
            format: uuid
            minLength: 36
            maxLength: 36
          in: query
          name: objectId
        - schema:
            type: string
            enum:
              - waiting
              - accepted
              - refused
              - autoresolved
          in: query
          name: status
        - schema:
            type: object
            default:
              createdAt: desc
            properties:
              createdAt:
                type: string
                enum:
                  - asc
                  - desc
          in: query
          name: order
          style: deepObject
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionReport'
          in: query
          name: includes[]
    post:
      summary: Create a new Report
      operationId: post-report
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  enum:
                    - manga
                    - chapter
                    - user
                    - scanlation_group
                    - author
                reason:
                  type: string
                  format: uuid
                  minLength: 36
                  maxLength: 36
                objectId:
                  type: string
                  format: uuid
                  minLength: 36
                  maxLength: 36
                details:
                  type: string
        description: The size of the body is limited to 8KB.
      tags:
        - Report
  /upload:
    get:
      summary: Get the current User upload session
      operationId: get-upload-session
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSession'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Upload
  /upload/begin:
    post:
      summary: Start an upload session
      operationId: begin-upload-session
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginUploadSession'
        description: The size of the body is limited to 4KB.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSession'
      tags:
        - Upload
  /upload/begin/{chapterId}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: chapterId
        in: path
        required: true
    post:
      summary: Start an edit chapter session
      operationId: begin-edit-session
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginEditSession'
        description: The size of the body is limited to 1KB.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadSession'
        '400':
          description: Bad Request if Chapter's Manga is unpublished
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized if user does not have upload permissions or has no rights to edit the chapter (needs to be uploader or group member)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Upload
  /upload/{uploadSessionId}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: uploadSessionId
        in: path
        required: true
    post:
      summary: Upload images to the upload session
      operationId: put-upload-session-file
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                      - error
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UploadSessionFile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Upload
    delete:
      summary: Abandon upload session
      operationId: abandon-upload-session
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      tags:
        - Upload
  /upload/{uploadSessionId}/commit:
    parameters:
      - schema:
          type: string
          format: uuid
        name: uploadSessionId
        in: path
        required: true
    post:
      summary: Commit the upload session and specify chapter data
      operationId: commit-upload-session
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitUploadSession'
        description: The size of the body is limited to 4KB.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chapter'
      tags:
        - Upload
  /upload/{uploadSessionId}/{uploadSessionFileId}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: uploadSessionId
        in: path
        required: true
      - schema:
          type: string
          format: uuid
        name: uploadSessionFileId
        in: path
        required: true
    delete:
      summary: Delete an uploaded image from the Upload Session
      operationId: delete-uploaded-session-file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      tags:
        - Upload
  /upload/{uploadSessionId}/batch:
    parameters:
      - schema:
          type: string
          format: uuid
        name: uploadSessionId
        in: path
        required: true
    delete:
      summary: Delete a set of uploaded images from the Upload Session
      operationId: delete-uploaded-session-files
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
                minItems: 1
        description: The size of the body is limited to 20KB.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
      tags:
        - Upload
  /manga/{mangaId}/relation:
    parameters:
      - schema:
          type: string
          format: uuid
        name: mangaId
        in: path
        required: true
    get:
      summary: Manga relation list
      tags:
        - Manga
      parameters:
        - schema:
            $ref: '#/components/schemas/ReferenceExpansionMangaRelation'
          in: query
          name: includes[]
      responses:
        '200':
          description: Manga relation list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaRelationList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-manga-relation
      security: []
    post:
      summary: Create Manga relation
      operationId: post-manga-relation
      parameters:
        - schema:
            type: string
            default: application/json
          name: Content-Type
          in: header
          required: true
      responses:
        '200':
          description: Manga relation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MangaRelationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MangaRelationCreate'
        description: The size of the body is limited to 8KB.
      description: Create a new Manga relation.
      tags:
        - Manga
  /manga/{mangaId}/relation/{id}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: mangaId
        in: path
        required: true
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
    delete:
      summary: Delete Manga relation
      operationId: delete-manga-relation-id
      responses:
        '200':
          description: Manga relation has been deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Manga
  /rating:
    get:
      parameters:
        - schema:
            type: array
            items:
              type: string
              format: uuid
          name: manga
          in: query
          style: deepObject
          required: true
      summary: Get your ratings
      operationId: get-rating
      responses:
        '200':
          description: Self-rating list
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: 'ok'
                  ratings:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        rating:
                          type: integer
                        createdAt:
                          type: string
                          format: date-time
                example:
                  result: ok
                  ratings:
                    f9c33607-9180-4ba6-b85c-e4b5faee7192:
                      rating: 7
                      createdAt: "2021-12-27T08:47:37+00:00"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Rating
  /rating/{mangaId}:
    parameters:
      - schema:
          type: string
          format: uuid
        name: mangaId
        in: path
        required: true
    post:
      summary: Create or update Manga rating
      operationId: post-rating-manga-id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Rating
    delete:
      summary: Delete Manga rating
      operationId: delete-rating-manga-id
      responses:
        '200':
          description: Manga rating was deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Rating

  /statistics/chapter/{uuid}:
    get:
      parameters:
        - schema:
            type: string
            format: uuid
          name: uuid
          in: path
          required: true
      summary: Get statistics about given chapter
      operationId: get-statistics-chapter-uuid
      responses:
        '200':
          description: Statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: 'ok'
                  statistics:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        comments:
                          $ref: '#/components/schemas/StatisticsDetailsComments'
                example:
                  result: ok
                  statistics:
                    f9c33607-9180-4ba6-b85c-e4b5faee7192:
                      comments:
                        threadId: 4756728
                        repliesCount: 12
      tags:
        - Statistics
  /statistics/chapter:
    get:
      parameters:
        - schema:
            type: array
            items:
              type: string
              format: uuid
          name: chapter[]
          in: query
          style: deepObject
          required: true
      summary: Get statistics about given chapters
      operationId: get-statistics-chapters
      responses:
        '200':
          description: Statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: 'ok'
                  statistics:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        comments:
                          $ref: '#/components/schemas/StatisticsDetailsComments'
                example:
                  result: ok
                  statistics:
                    f9c33607-9180-4ba6-b85c-e4b5faee7192:
                      comments:
                        threadId: 4756728
                        repliesCount: 12
      tags:
        - Statistics

  /statistics/group/{uuid}:
    get:
      parameters:
        - schema:
            type: string
            format: uuid
          name: uuid
          in: path
          required: true
      summary: Get statistics about given scanlation group
      operationId: get-statistics-group-uuid
      responses:
        '200':
          description: Statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: 'ok'
                  statistics:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        comments:
                          $ref: '#/components/schemas/StatisticsDetailsComments'
                example:
                  result: ok
                  statistics:
                    f9c33607-9180-4ba6-b85c-e4b5faee7192:
                      comments:
                        threadId: 4756728
                        repliesCount: 12
      tags:
        - Statistics
  /statistics/group:
    get:
      parameters:
        - schema:
            type: array
            items:
              type: string
              format: uuid
          name: group[]
          in: query
          style: deepObject
          required: true
      summary: Get statistics about given groups
      operationId: get-statistics-groups
      responses:
        '200':
          description: Statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: 'ok'
                  statistics:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        comments:
                          $ref: '#/components/schemas/StatisticsDetailsComments'
                example:
                  result: ok
                  statistics:
                    f9c33607-9180-4ba6-b85c-e4b5faee7192:
                      comments:
                        threadId: 4756728
                        repliesCount: 12
      tags:
        - Statistics

  /statistics/manga/{uuid}:
    get:
      parameters:
        - schema:
            type: string
            format: uuid
          name: uuid
          in: path
          required: true
      summary: Get statistics about given Manga
      operationId: get-statistics-manga-uuid
      responses:
        '200':
          description: Statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: 'ok'
                  statistics:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        comments:
                          $ref: '#/components/schemas/StatisticsDetailsComments'
                        rating:
                          type: object
                          properties:
                            average:
                              type: number
                              nullable: true
                              description: Will be nullable if no ratings has been given
                            bayesian:
                              type: number
                              nullable: false
                              description: Average weighted on all the Manga population
                            distribution:
                              type: object
                              properties:
                                "1":
                                  type: integer
                                "2":
                                  type: integer
                                "3":
                                  type: integer
                                "4":
                                  type: integer
                                "5":
                                  type: integer
                                "6":
                                  type: integer
                                "7":
                                  type: integer
                                "8":
                                  type: integer
                                "9":
                                  type: integer
                                "10":
                                  type: integer
                        follows:
                          type: integer
                example:
                  result: ok
                  statistics:
                    f9c33607-9180-4ba6-b85c-e4b5faee7192:
                      comments:
                        threadId: 4756728
                        repliesCount: 12
                      rating:
                        average: 7.5
                        bayesian: 6.47
                        distribution:
                          "1": 0
                          "2": 0
                          "3": 0
                          "4": 0
                          "5": 0
                          "6": 0
                          "7": 2
                          "8": 2
                          "9": 0
                          "10": 0
                      follows: 3
      tags:
        - Statistics
  /statistics/manga:
    get:
      parameters:
        - schema:
            type: array
            items:
              type: string
              format: uuid
          name: manga[]
          in: query
          style: deepObject
          required: true
      summary: Find statistics about given Manga
      operationId: get-statistics-manga
      responses:
        '200':
          description: Statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: 'ok'
                  statistics:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        comments:
                          $ref: '#/components/schemas/StatisticsDetailsComments'
                        rating:
                          type: object
                          properties:
                            average:
                              type: number
                              nullable: true
                              description: Will be nullable if no ratings has been done
                            bayesian:
                              type: number
                              nullable: false
                              description: Average weighted on all the Manga population
                        follows:
                          type: integer
                example:
                  result: ok
                  statistics:
                    f9c33607-9180-4ba6-b85c-e4b5faee7192:
                      comments:
                        threadId: 4756728
                        repliesCount: 12
                      rating:
                        average: 7.5
                        bayesian: 6.47
                      follows: 3
      tags:
        - Statistics
  /settings/template:
    get:
      summary: Get latest Settings template
      operationId: get-settings-template
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: JSON Schema to validate settings
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Manga no content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Settings
    post:
      summary: Create Settings template
      operationId: post-settings-template
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: A JSON Schema to validate settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: JSON Schema to validate settings
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Settings
  /settings/template/{version}:
    get:
      parameters:
        - schema:
            type: string
            format: uuid
          name: version
          in: path
          required: true
      summary: Get Settings template by version id
      operationId: get-settings-template-version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: JSON Schema to validate settings
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Manga no content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Settings
  /settings:
    get:
      summary: Get an User Settings
      operationId: get-settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: ok
                  updatedAt:
                    type: string
                    format: date-time
                  settings:
                    type: object
                    description: Settings that were validated by linked template
                  template:
                    type: string
                    format: uuid
                    description: Settings template UUID
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Manga no content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Settings
    post:
      summary: Create or update an User Settings
      operationId: post-settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                settings:
                  type: object
                  description: A JSON object that can be validated against the lastest available template
                updatedAt:
                  type: string
                  format: date-time
                  description: 'Format: 2022-03-14T13:19:37'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: ok
                  updatedAt:
                    type: string
                    format: date-time
                  settings:
                    type: object
                    description: Settings that were validated against the linked template
                  template:
                    type: string
                    format: uuid
                    description: Settings template UUID
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Manga no content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Settings
  /user/history:
    get:
      summary: Get users reading history
      operationId: get-reading-history
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    default: ok
                  ratings:
                    type: array
                    items:
                      type: object
                      properties:
                        chapterId:
                          type: string
                        readDate:
                          type: string
                          format: date-time
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Manga no content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - ReadMarker
  /forums/thread:
    post:
      operationId: forums-thread-create
      summary: Create forums thread
      description: >
        Creates a thread in the forums for the given resource, which backs the comments functionality.

        A thread is only created if it doesn't exist yet; otherwise the preexisting thread is returned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: ["manga", "group", "chapter"]
                  description: The type of the resource
                id:
                  type: string
                  format: uuid
                  description: The id of the resource
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForumsThreadResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: If the resource for which the thread creation was requested does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Forums

components:
  schemas:
    MangaRequest:
      description: ''
      type: object
      title: MangaRequest
      properties:
        title:
          $ref: '#/components/schemas/LocalizedString'
        altTitles:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        authors:
          type: array
          items:
            type: string
            format: uuid
        artists:
          type: array
          items:
            type: string
            format: uuid
        links:
          type: object
          additionalProperties:
            type: string
        originalLanguage:
          type: string
          pattern: '^[a-z]{2}(-[a-z]{2})?$'
        lastVolume:
          type: string
          nullable: true
        lastChapter:
          type: string
          nullable: true
        publicationDemographic:
          type: string
          nullable: true
          enum:
            - shounen
            - shoujo
            - josei
            - seinen
        status:
          type: string
          nullable: false
          enum:
            - completed
            - ongoing
            - cancelled
            - hiatus
        year:
          type: integer
          nullable: true
          maximum: 9999
          minimum: 1
          description: Year of release
        contentRating:
          type: string
          enum:
            - safe
            - suggestive
            - erotica
            - pornographic
        chapterNumbersResetOnNewVolume:
          type: boolean
        tags:
          type: array
          items:
            type: string
            format: uuid
        primaryCover:
          type: string
          format: uuid
          nullable: true
        version:
          type: integer
          minimum: 1
    LocalizedString:
      type: object
      title: LocalizedString
      additionalProperties:
        type: string
        pattern: "^[a-z]{2,8}$"
    MangaResponse:
      title: MangaResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
        response:
          type: string
          default: entity
        data:
          $ref: '#/components/schemas/Manga'
    ChapterResponse:
      title: ChapterResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
        response:
          type: string
          default: entity
        data:
          $ref: '#/components/schemas/Chapter'
    Relationship:
      title: Relationship
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        related:
          type: string
          enum: ['monochrome', 'main_story', 'adapted_from', 'based_on', 'prequel', 'side_story', 'doujinshi', 'same_franchise', 'shared_universe', 'sequel', 'spin_off', 'alternate_story', 'alternate_version', 'preserialization', 'colored', 'serialization']
          description: Related Manga type, only present if you are on a Manga entity and a Manga relationship
        attributes:
          description: If Reference Expansion is applied, contains objects attributes
          nullable: true
          type: object
    Chapter:
      title: Chapter
      type: object
      x-examples:
        example:
          id: a05de006-df86-4fe1-9d20-32664a78c1cc
          type: chapter
          attributes:
            title: Chapter title
            volume: 1
            chapter: '15.1'
            uploader:
              id: 23d52040-3a77-4ffe-84dd-6dbf259e32ed
              type: user
              attributes: []
            manga:
              id: 439ea5a9-e922-44d1-b9c1-a3e1158bd55f
              type: manga
              attributes: []
            groups:
              - id: cb4cf9ac-ee21-486f-ab0f-21b17ba0ab7f
                type: scanlation_group
                attributes: []
            translatedLanguage: en
            externalUrl: 'http://some-external-url.tld'
            version: 1
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - chapter
        attributes:
          $ref: '#/components/schemas/ChapterAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    Manga:
      title: Manga
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - manga
        attributes:
          $ref: '#/components/schemas/MangaAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        result:
          type: string
          default: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      title: Error
      type: object
      properties:
        id:
          type: string
        status:
          type: integer
        title:
          type: string
        detail:
          type: string
    ChapterAttributes:
      title: ChapterAttributes
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          nullable: true
        volume:
          type: string
          nullable: true
        chapter:
          type: string
          nullable: true
          maxLength: 8
        pages:
          type: integer
          description: Count of readable images for this chapter
        translatedLanguage:
          type: string
          pattern: '^[a-z]{2}(-[a-z]{2})?$'
        uploader:
          type: string
          format: uuid
        externalUrl:
          type: string
          pattern: ^https?://
          maxLength: 512
          nullable: true
          description: Denotes a chapter that links to an external source.
        version:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
        publishAt:
          type: string
        readableAt:
          type: string
    MangaAttributes:
      title: MangaAttributes
      type: object
      properties:
        title:
          $ref: '#/components/schemas/LocalizedString'
        altTitles:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        isLocked:
          type: boolean
        links:
          type: object
          additionalProperties:
            type: string
        originalLanguage:
          type: string
        lastVolume:
          type: string
          nullable: true
        lastChapter:
          type: string
          nullable: true
        publicationDemographic:
          nullable: true
          type: string
          enum:
            - shounen
            - shoujo
            - josei
            - seinen
        status:
          type: string
          nullable: false
          enum:
            - completed
            - ongoing
            - cancelled
            - hiatus
        year:
          type: integer
          nullable: true
          description: Year of release
        contentRating:
          type: string
          enum:
            - safe
            - suggestive
            - erotica
            - pornographic
        chapterNumbersResetOnNewVolume:
          type: boolean
        availableTranslatedLanguages:
          type: array
        latestUploadedChapter:
          type: string
          format: uuid
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        state:
          type: string
          enum: ['draft', 'submitted', 'published', 'rejected']
        version:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
    MangaCreate:
      allOf:
        - $ref: '#/components/schemas/MangaRequest'
        - required:
            - title
            - status
            - originalLanguage
            - contentRating
    MangaEdit:
      allOf:
        - $ref: '#/components/schemas/MangaRequest'
        - required:
            - version
    ChapterEdit:
      allOf:
        - $ref: '#/components/schemas/ChapterRequest'
        - required:
            - version
    Response:
      title: Response
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
    Login:
      type: object
      title: Login
      additionalProperties: false
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 64
        email:
          type: string
        password:
          type: string
          minLength: 8
          maxLength: 1024
      required:
        - password
    LoginResponse:
      title: LoginResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
        token:
          type: object
          properties:
            session:
              type: string
            refresh:
              type: string
    CheckResponse:
      title: CheckResponse
      type: object
      description: ''
      properties:
        result:
          type: string
          default: ok
        isAuthenticated:
          type: boolean
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
    LogoutResponse:
      title: LogoutResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
    RefreshToken:
      type: object
      title: RefreshToken
      additionalProperties: false
      properties:
        token:
          type: string
          minLength: 1
      required:
        - token
    RefreshResponse:
      title: RefreshResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
        token:
          type: object
          properties:
            session:
              type: string
            refresh:
              type: string
        message:
          type: string
      required:
        - result
    AccountActivateResponse:
      title: AccountActivateResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
    CreateAccount:
      title: CreateAccount
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 64
        password:
          type: string
          minLength: 8
          maxLength: 1024
        email:
          type: string
          format: email
      required:
        - username
        - password
        - email
    ScanlationGroupResponse:
      title: ScanlationGroupResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
        response:
          type: string
          default: entity
        data:
          $ref: '#/components/schemas/ScanlationGroup'
    ScanlationGroup:
      title: ScanlationGroup
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - scanlation_group
        attributes:
          $ref: '#/components/schemas/ScanlationGroupAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    ScanlationGroupAttributes:
      title: ScanlationGroupAttributes
      type: object
      properties:
        name:
          type: string
        altNames:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedString'
        website:
          type: string
          nullable: true
        ircServer:
          type: string
          nullable: true
        ircChannel:
          type: string
          nullable: true
        discord:
          type: string
          nullable: true
        contactEmail:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        twitter:
          type: string
          nullable: true
          format: uri
          pattern: '^https?://'
        mangaUpdates:
          type: string
          nullable: true
          format: uri
          pattern: '^https:\/\/www\.mangaupdates\.com\/(group|publisher)(s\.html\?id=\d+|\/[\w-]+\/?([\w-]+)?(\/)?)$'
          maxLength: 128
        focusedLanguage:
          type: array
          nullable: true
          items:
            type: string
            pattern: '^[a-z]{2}(-[a-z]{2})?$'
        locked:
          type: boolean
        official:
          type: boolean
        inactive:
          type: boolean
        exLicensed:
          type: boolean
        publishDelay:
          type: string
          example: "P4D"
          description: "Should respected ISO 8601 duration specification: https://en.wikipedia.org/wiki/ISO_8601#Durations"
          pattern: '^(P([1-9]|[1-9][0-9])D)?(P?([1-9])W)?(P?T(([1-9]|1[0-9]|2[0-4])H)?(([1-9]|[1-5][0-9]|60)M)?(([1-9]|[1-5][0-9]|60)S)?)?$'
        version:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
    User:
      title: User
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - user
        attributes:
          $ref: '#/components/schemas/UserAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    UserAttributes:
      title: UserAttributes
      type: object
      properties:
        username:
          type: string
        roles:
          type: array
          items:
            type: string
        version:
          type: integer
          minimum: 1
    CreateScanlationGroup:
      title: CreateScanlationGroup
      type: object
      properties:
        name:
          type: string
        website:
          type: string
          nullable: true
        ircServer:
          type: string
          nullable: true
        ircChannel:
          type: string
          nullable: true
        discord:
          type: string
          nullable: true
        contactEmail:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        twitter:
          type: string
          nullable: true
          format: uri
          pattern: '^https?://twitter\.com'
        mangaUpdates:
          type: string
          nullable: true
          pattern: '^https:\/\/www\.mangaupdates\.com\/(group|publisher)(s\.html\?id=\d+|\/[\w-]+\/?([\w-]+)?(\/)?)$'
          maxLength: 128
        inactive:
          type: boolean
        publishDelay:
          type: string
          nullable: true
          pattern: "^P(([1-9]|[1-9][0-9])D)?(([1-9])W)?(T(([1-9]|1[0-9]|2[0-4])H)?(([1-9]|[1-5][0-9]|60)M)?(([1-9]|[1-5][0-9]|60)S)?)?$"
      required:
        - name
    ScanlationGroupEdit:
      title: ScanlationGroupEdit
      type: object
      properties:
        name:
          type: string
        leader:
          type: string
          format: uuid
        members:
          type: array
          items:
            type: string
            format: uuid
        website:
          type: string
          nullable: true
        ircServer:
          type: string
          nullable: true
        ircChannel:
          type: string
          nullable: true
        discord:
          type: string
          nullable: true
        contactEmail:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        twitter:
          type: string
          nullable: true
          format: uri
          pattern: '^https?://'
        mangaUpdates:
          type: string
          nullable: true
          format: uri
          pattern: '^https:\/\/www\.mangaupdates\.com\/(group|publisher)(s\.html\?id=\d+|\/[\w-]+\/?([\w-]+)?(\/)?)$'
          maxLength: 128
        focusedLanguages:
          type: array
          nullable: true
          items:
            type: string
            pattern: '^[a-z]{2}(-[a-z]{2})?$'
        inactive:
          type: boolean
        locked:
          type: boolean
        publishDelay:
          type: string
        version:
          type: integer
          minimum: 1
      required:
        - version
    CustomListCreate:
      title: CustomListCreate
      type: object
      properties:
        name:
          type: string
        visibility:
          type: string
          enum:
            - public
            - private
        manga:
          type: array
          items:
            type: string
            format: uuid
        version:
          type: integer
          minimum: 1
      required:
        - name
    CustomListEdit:
      title: CustomListEdit
      type: object
      properties:
        name:
          type: string
        visibility:
          type: string
          enum:
            - public
            - private
        manga:
          type: array
          items:
            type: string
            format: uuid
        version:
          type: integer
          minimum: 1
      required:
        - version
    CustomListResponse:
      title: CustomListResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
        response:
          type: string
          default: entity
        data:
          $ref: '#/components/schemas/CustomList'
    CustomList:
      title: CustomList
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - custom_list
        attributes:
          $ref: '#/components/schemas/CustomListAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    CustomListAttributes:
      title: CustomListAttributes
      type: object
      properties:
        name:
          type: string
        visibility:
          type: string
          enum:
            - private
            - public
        version:
          type: integer
          minimum: 1
    CoverResponse:
      title: CoverResponse
      type: object
      properties:
        result:
          type: string
        response:
          type: string
          default: entity
        data:
          $ref: '#/components/schemas/Cover'
    Cover:
      title: Cover
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - cover_art
        attributes:
          $ref: '#/components/schemas/CoverAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    CoverAttributes:
      title: CoverAttributes
      type: object
      properties:
        volume:
          type: string
          nullable: true
        fileName:
          type: string
        description:
          type: string
          nullable: true
        locale:
          type: string
          nullable: true
        version:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
    CoverEdit:
      title: CoverEdit
      type: object
      properties:
        volume:
          type: string
          nullable: true
          minLength: 0
          maxLength: 8
        description:
          type: string
          nullable: true
          minLength: 0
          maxLength: 512
        locale:
          type: string
          nullable: true
          pattern: '^[a-z]{2}(-[a-z]{2})?$'
        version:
          type: integer
          minimum: 1
      required:
        - version
        - volume
    AuthorResponse:
      title: AuthorResponse
      type: object
      properties:
        result:
          type: string
        response:
          type: string
          default: entity
        data:
          $ref: '#/components/schemas/Author'
    Author:
      title: Author
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - author
        attributes:
          $ref: '#/components/schemas/AuthorAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    AuthorAttributes:
      title: AuthorAttributes
      type: object
      properties:
        name:
          type: string
        imageUrl:
          type: string
        biography:
          $ref: '#/components/schemas/LocalizedString'
        twitter:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://twitter\\.com(/|$)"
        pixiv:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?pixiv\\.net(/|$)"
        melonBook:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?melonbooks\\.co\\.jp(/|$)"
        fanBox:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?fanbox\\.cc(/|$)"
        booth:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?booth\\.pm(/|$)"
        nicoVideo:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?nicovideo\\.jp(/|$)"
        skeb:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?skeb\\.jp(/|$)"
        fantia:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?fantia\\.jp(/|$)"
        tumblr:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?tumblr\\.com(/|$)"
        youtube:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://www\\.youtube\\.com(/|$)"
        weibo:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?weibo\\.(cn|com)(/|$)"
        naver:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?naver\\.com(/|$)"
        website:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://"
        version:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
    AuthorEdit:
      title: AuthorEdit
      type: object
      properties:
        name:
          type: string
        biography:
          $ref: '#/components/schemas/LocalizedString'
        twitter:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://twitter\\.com(/|$)"
        pixiv:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?pixiv\\.net(/|$)"
        melonBook:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?melonbooks\\.co\\.jp(/|$)"
        fanBox:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?fanbox\\.cc(/|$)"
        booth:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?booth\\.pm(/|$)"
        nicoVideo:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?nicovideo\\.jp(/|$)"
        skeb:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?skeb\\.jp(/|$)"
        fantia:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?fantia\\.jp(/|$)"
        tumblr:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?tumblr\\.com(/|$)"
        youtube:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://www\\.youtube\\.com(/|$)"
        weibo:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?weibo\\.(cn|com)(/|$)"
        naver:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?naver\\.com(/|$)"
        website:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://"
        version:
          type: integer
          minimum: 1
      required:
        - version
    AuthorCreate:
      type: object
      title: AuthorCreate
      additionalProperties: false
      properties:
        name:
          type: string
        biography:
          $ref: '#/components/schemas/LocalizedString'
        twitter:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://twitter\\.com(/|$)"
        pixiv:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?pixiv\\.net(/|$)"
        melonBook:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?melonbooks\\.co\\.jp(/|$)"
        fanBox:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?fanbox\\.cc(/|$)"
        booth:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?booth\\.pm(/|$)"
        nicoVideo:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?nicovideo\\.jp(/|$)"
        skeb:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?skeb\\.jp(/|$)"
        fantia:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?fantia\\.jp(/|$)"
        tumblr:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?tumblr\\.com(/|$)"
        youtube:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://www\\.youtube\\.com(/|$)"
        weibo:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?weibo\\.(cn|com)(/|$)"
        naver:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://([\\w-]+\\.)?naver\\.com(/|$)"
        website:
          type: string
          nullable: true
          format: uri
          pattern: "^https?://"
      required:
        - name
    ApiClientResponse:
      title: ApiClientResponse
      type: object
      properties:
        result:
          type: string
        response:
          type: string
          default: entity
        data:
          $ref: '#/components/schemas/ApiClient'
    ApiClient:
      title: ApiClient
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - api_client
        attributes:
          $ref: '#/components/schemas/ApiClientAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    ApiClientAttributes:
      title: ApiClientAttributes
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        profile:
          type: string
        clientId:
          type: string
          nullable: true
        version:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
    ApiClientEdit:
      title: ApiClient
      type: object
      properties:
        description:
          type: string
          nullable: true
        version:
          type: integer
          minimum: 1
      required:
        - version
    ApiClientCreate:
      type: object
      title: ApiClientCreate
      additionalProperties: false
      properties:
        name:
          type: string
          minLength: 5
          maxLength: 32
        description:
          type: string
          nullable: true
          maxLength: 1024
        profile:
          type: string
          enum: ["personal"]
        version:
          type: integer
          minimum: 1
      required:
        - name
        - profile

    MappingIdBody:
      type: object
      title: MappingIdBody
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - group
            - manga
            - chapter
            - tag
        ids:
          type: array
          items:
            type: integer
    MappingIdResponse:
      title: MappingIdResponse
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/MappingId'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    MappingId:
      title: MappingId
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - mapping_id
        attributes:
          $ref: '#/components/schemas/MappingIdAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    MappingIdAttributes:
      title: MappingIdAttributes
      type: object
      properties:
        type:
          type: string
          enum:
            - manga
            - chapter
            - group
            - tag
        legacyId:
          type: integer
        newId:
          type: string
          format: uuid
    TagResponse:
      title: TagResponse
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    Tag:
      title: Tag
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - tag
        attributes:
          $ref: '#/components/schemas/TagAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    TagAttributes:
      title: TagAttributes
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        group:
          type: string
          enum:
            - content
            - format
            - genre
            - theme
        version:
          type: integer
          minimum: 1
    UserResponse:
      title: UserResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
        response:
          type: string
          default: entity
        data:
          $ref: '#/components/schemas/User'
    SendAccountActivationCode:
      type: object
      title: SendAccountActivationCode
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
      required:
        - email
    RecoverCompleteBody:
      type: object
      title: RecoverCompleteBody
      additionalProperties: false
      properties:
        newPassword:
          type: string
          minLength: 8
          maxLength: 1024
      required:
        - newPassword
    UpdateMangaStatus:
      title: UpdateMangaStatus
      type: object
      properties:
        status:
          type: string
          nullable: true
          enum:
            - reading
            - on_hold
            - plan_to_read
            - dropped
            - re_reading
            - completed
      required:
        - status
    ChapterRequest:
      title: ChapterRequest
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          nullable: true
        volume:
          type: string
          nullable: true
        chapter:
          type: string
          nullable: true
          maxLength: 8
        translatedLanguage:
          type: string
          pattern: '^[a-z]{2}(-[a-z]{2})?$'
        groups:
          type: array
          maxItems: 10
          items:
            type: string
            format: uuid
            minLength: 36
            maxLength: 36
        version:
          type: integer
          minimum: 1
    CoverList:
      title: CoverList
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/Cover'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    AuthorList:
      title: AuthorList
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    ApiClientList:
      title: ApiClientList
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApiClient'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    ChapterList:
      title: ChapterList
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/Chapter'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    ScanlationGroupList:
      title: ScanlationGroupList
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/ScanlationGroup'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    MangaRelationCreate:
      allOf:
        - $ref: '#/components/schemas/MangaRelationRequest'
        - required:
            - targetManga
            - relation
    MangaRelationRequest:
      description: ''
      type: object
      title: MangaRelationRequest
      properties:
        targetManga:
          type: string
          format: uuid
        relation:
          type: string
          enum: ['monochrome', 'main_story', 'adapted_from', 'based_on', 'prequel', 'side_story', 'doujinshi', 'same_franchise', 'shared_universe', 'sequel', 'spin_off', 'alternate_story', 'alternate_version', 'preserialization', 'colored', 'serialization']
    MangaRelationList:
      title: MangaRelationList
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/MangaRelation'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    MangaRelationResponse:
      title: MangaRelationResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
        response:
          type: string
          default: entity
        data:
          $ref: '#/components/schemas/MangaRelation'
    MangaRelation:
      title: MangaRelation
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - manga_relation
        attributes:
          $ref: '#/components/schemas/MangaRelationAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    MangaRelationAttributes:
      title: MangaRelationAttributes
      type: object
      properties:
        relation:
          type: string
          enum: ['monochrome', 'main_story', 'adapted_from', 'based_on', 'prequel', 'side_story', 'doujinshi', 'same_franchise', 'shared_universe', 'sequel', 'spin_off', 'alternate_story', 'alternate_version', 'preserialization', 'colored', 'serialization']
        version:
          type: integer
          minimum: 1
    MangaList:
      title: MangaList
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/Manga'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    CustomListList:
      title: CustomListList
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/CustomList'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    UserList:
      title: UserList
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    UploadSession:
      title: UploadSession
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - upload_session
        attributes:
          $ref: '#/components/schemas/UploadSessionAttributes'
    UploadSessionAttributes:
      title: UploadSessionAttributes
      type: object
      properties:
        isCommitted:
          type: boolean
        isProcessed:
          type: boolean
        isDeleted:
          type: boolean
        version:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
    UploadSessionFile:
      title: UploadSessionFile
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - upload_session_file
        attributes:
          $ref: '#/components/schemas/UploadSessionFileAttributes'
    UploadSessionFileAttributes:
      title: UploadSessionFileAttributes
      type: object
      properties:
        originalFileName:
          type: string
        fileHash:
          type: string
        fileSize:
          type: number
        mimeType:
          type: string
        source:
          type: string
          enum:
            - local
            - remote
        version:
          type: integer
          minimum: 1
    ChapterReadMarkerBatch:
      title: ChapterReadMarkersBatch
      type: object
      properties:
        chapterIdsRead:
          type: array
          items:
            type: string
            format: uuid
            minLength: 36
            maxLength: 36
        chapterIdsUnread:
          type: array
          items:
            type: string
            format: uuid
            minLength: 36
            maxLength: 36
      additionalProperties: false
      anyOf:
        - required:
            - chapterIdsRead
        - required:
            - chapterIdsUnread
      x-examples:
        example-read:
          chapterIdsRead:
            - 1
            - 2
            - 3
        example-unread:
          chapterIdsUnread:
            - 1
            - 2
            - 3
        example-mixed:
          chapterIdsRead:
            - 1
            - 2
            - 3
          chapterIdsUnread:
            - 1
            - 2
            - 3
    BeginUploadSession:
      title: BeginUploadSession
      type: object
      properties:
        groups:
          type: array
          maxItems: 10
          items:
            type: string
            format: uuid
            minLength: 36
            maxLength: 36
        manga:
          type: string
          format: uuid
          minLength: 36
          maxLength: 36
      additionalProperties: false
      required: [manga, groups]
    BeginEditSession:
      title: BeginEditSession
      type: object
      properties:
        version:
          type: integer
          minimum: 1
      additionalProperties: false
      required: [version]
    CommitUploadSession:
      title: BeginUploadSession
      type: object
      properties:
        chapterDraft:
          $ref: '#/components/schemas/ChapterDraft'
        pageOrder:
          description: ordered list of Upload Session File ids
          type: array
          items:
            type: string
            format: uuid
            minLength: 36
            maxLength: 36
          minItems: 1
          maxItems: 500
    ChapterDraft:
      type: object
      properties:
        volume:
          nullable: true
          type: string
          maxLength: 8
          pattern: ^((0|[1-9]\d*)(\.\d+)?[a-z]?)?$
        chapter:
          nullable: true
          type: string
          maxLength: 8
          pattern: ^((0|[1-9]\d*)(\.\d+)?[a-z]?)?$
        title:
          nullable: true
          type: string
          maxLength: 255
        translatedLanguage:
          type: string
          pattern: '^[a-z]{2}(-[a-z]{2})?$'
        externalUrl:
          nullable: true
          type: string
          maxLength: 512
          pattern: ^https?://
        publishAt:
          type: string
          pattern: '^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$'
      required:
        - volume
        - chapter
        - title
        - translatedLanguage
      additionalProperties: false
    ReportListResponse:
      title: ReportListResponse
      type: object
      properties:
        result:
          type: string
          enum:
            - ok
            - error
        response:
          type: string
          default: collection
        data:
          type: array
          items:
            $ref: '#/components/schemas/Report'
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer
    Report:
      title: Report
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - report
        attributes:
          $ref: '#/components/schemas/ReportAttributes'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
    ReportAttributes:
      title: ReportAttributes
      type: object
      properties:
        details:
          type: string
        objectId:
          type: string
        status:
          type: string
          enum:
            - waiting
            - accepted
            - refused
            - autoresolved
        createdAt:
          type: string
    ForumsThreadResponse:
      title: ForumsThreadResponse
      type: object
      properties:
        result:
          type: string
          default: ok
        response:
          type: string
          default: entity
        data:
          type: object
          properties:
            type:
              type: string
              default: thread
            id:
              type: integer
              description: The id for the thread on the forums, accessible at `https://forums.mangadex.org/threads/:id`
            attributes:
              type: object
              properties:
                repliesCount:
                  type: integer
                  description: The number of replies so far in the forums thread returned
    ReferenceExpansionAuthor:
      title: ReferenceExpansionAuthor
      description: Reference expansion options for author/artist entities or lists
      type: array
      items:
        type: string
        enum:
          - manga
    ReferenceExpansionApiClient:
      title: ReferenceExpansionApiClient
      description: Reference expansion options for api_client entities or lists
      type: array
      items:
        type: string
        enum:
          - creator
    ReferenceExpansionChapter:
      title: ReferenceExpansionChapter
      description: Reference expansion options for chapter entities or lists
      type: array
      items:
        type: string
        enum:
          - manga
          - scanlation_group
          - user
    ReferenceExpansionCoverArt:
      title: ReferenceExpansionCoverArt
      description: Reference expansion options for cover art entities or lists
      type: array
      items:
        type: string
        enum:
          - manga
          - user
    ReferenceExpansionManga:
      title: ReferenceExpansionManga
      description: Reference expansion options for manga entities or lists
      type: array
      items:
        type: string
        enum:
          - manga
          - cover_art
          - author
          - artist
          - tag
          - creator
    ReferenceExpansionMangaRelation:
      title: ReferenceExpansionMangaRelation
      description: Reference expansion options for manga relation entities or lists
      type: array
      items:
        type: string
        enum:
          - manga
    ReferenceExpansionReport:
      title: ReferenceExpansionReport
      description: Reference expansion options for user report entities or lists
      type: array
      items:
        type: string
        enum:
          - user
          - reason
    ReferenceExpansionScanlationGroup:
      title: ReferenceExpansionScanlationGroup
      description: Reference expansion options for scanlation group entities or lists
      type: array
      items:
        type: string
        enum:
          - leader
          - member
    StatisticsDetailsComments:
      title: StatisticsDetailsComments
      type: object
      nullable: true
      description: >
        Comments-related statistics of an entity.

        If it is `null`, the entity doesn't have a backing comments thread, and therefore has no comments yet.
      properties:
        threadId:
          type: number
          description: The id of the thread backing the comments for that entity on the MangaDex Forums.
          nullable: false
          minimum: 1
        repliesCount:
          type: number
          description: >
            The number of replies on the MangaDex Forums thread backing this entity's comments.
            This excludes the initial comment that opens the thread, which is created by our systems.
          nullable: false
          minimum: 0
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
security:
  - Bearer: []
