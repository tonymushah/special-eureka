/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n\t\tquery recentlyAddedHome {\n\t\t\thome {\n\t\t\t\trecentlyUploaded {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\tpages\n\t\t\t\t\t\t\ttranslatedLanguage\n\t\t\t\t\t\t\treadableAt\n\t\t\t\t\t\t\tchapter\n\t\t\t\t\t\t\tvolume\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tscanlationGroups {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmanga {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t": types.RecentlyAddedHomeDocument,
    "\n\t\tquery homePopularTitle {\n\t\t\thome {\n\t\t\t\tpopularTitles {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\ttags {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontentRating\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tauthorArtists {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t": types.HomePopularTitleDocument,
    "\n    query isChapterDownloaded($id: UUID!) {\n        chapter {\n            isDownloaded(id: $id) {\n                isDownloaded\n                hasFailed\n            }\n        }\n    }\n": types.IsChapterDownloadedDocument,
    "\n    subscription watchChapterDownloadState($id: UUID!, $sub: UUID!) {\n        watchDownloadState(objectId: $id, subId: $sub) {\n            hasFailed\n            isDownloaded\n        }\n    }\n": types.WatchChapterDownloadStateDocument,
    "\n\tquery recentlyAddedHomeQuery {\n\t\thome {\n\t\t\trecentlyAdded(params: { limit: 15 }) {\n\t\t\t\tdata {\n\t\t\t\t\tid\n\t\t\t\t\tattributes {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t}\n\t\t\t\t\trelationships {\n\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.RecentlyAddedHomeQueryDocument,
    "\n\tquery seasonal {\n\t\thome {\n\t\t\tseasonal {\n\t\t\t\tid\n\t\t\t\trelationships {\n\t\t\t\t\ttitles {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\taltTitles\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.SeasonalDocument,
    "\n  query staffPicks {\n    home {\n      staffPicks {\n        id\n        relationships {\n          titles {\n            id\n            attributes {\n              title\n              altTitles\n              state\n              description\n              status\n              availableTranslatedLanguages\n            }\n            relationships {\n              coverArt {\n                id\n                attributes {\n                  fileName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.StaffPicksDocument,
    "\n    mutation mangaListMutation($style: MangaListStyle!) {\n        userOption {\n            setMangaListStyle(mangaListStyle: $style)\n        }\n    }\n": types.MangaListMutationDocument,
    "\n    subscription mangaListStyleSub($subId: UUID!) {\n        watchMangaListStyle(subId: $subId)\n    }\n": types.MangaListStyleSubDocument,
    "\n    query mangaAggregate($id: UUID!, $size: Int = 3) {\n        manga {\n            aggregate(params: {mangaId: $id}) {\n                chunked(chunkSize: $size) {\n                    ids\n                    volumes {\n                        volume\n                        count\n                        chapters {\n                            chapter\n                            count\n                            ids\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.MangaAggregateDocument,
    "\n    query getMangaAggregateChapter($ids: [UUID!]!) {\n        chapter {\n            list(params: {chapterIds: $ids}) {\n                data {\n                    id\n                    attributes {\n                        title\n                        volume\n                        chapter\n                        translatedLanguage\n                        readableAt\n                    }\n                    relationships {\n                        scanlationGroups {\n                            id\n                            attributes {\n                                name\n                            }\n                        }\n                        user {\n                            id\n                            attributes {\n                                username\n                                roles\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetMangaAggregateChapterDocument,
    "\n    query chapterAggregateComments($ids: [UUID!]!) {\n        statistics {\n            chapter {\n                list(ids: $ids) {\n                    id\n                    comments {\n                        threadUrl\n                        repliesCount\n                    }\n                }\n            }\n        }\n    }\n": types.ChapterAggregateCommentsDocument,
    "\n    query getMangaCovers($id: UUID!, $offset: Int = 0, $limit: Int = 10) {\n        cover {\n            list(params: {mangaIds: [$id], offset: $offset, limit: $limit, order: {volume: ASCENDING}}) {\n                data {\n                    id\n                    attributes {\n                        description\n                        fileName\n                        volume\n                        locale\n                    }\n                }\n                total\n                offset\n                limit\n            }\n        }\n    }\n": types.GetMangaCoversDocument,
    "\n    query getRelatedTitlesData($ids: [UUID!]!) {\n        manga {\n            list(params: {mangaIds: $ids}) {\n                data {\n                    id\n                    attributes {\n                        title\n                        status\n                        description\n                    }\n                    relationships {\n                        coverArt {\n                            id\n                            attributes {\n                                fileName\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetRelatedTitlesDataDocument,
    "\n\t\t\t\t\tquery userMeOnSidebarFooter {\n\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\tme {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t": types.UserMeOnSidebarFooterDocument,
    "\n\t\t\tsubscription serverIconState($sub_id: UUID!) {\n\t\t\t\twatchIsAppMounted(subId: $sub_id)\n\t\t\t}\n\t\t": types.ServerIconStateDocument,
    "\n    subscription rtlSidebarSub($sub_id: UUID!) {\n        watchSidebarDirection(subId: $sub_id)\n    }\n": types.RtlSidebarSubDocument,
    "\n    subscription userMe($sub_id: UUID!) {\n        watchUserMe(subId: $sub_id) {\n            username\n            roles\n        }\n    }\n": types.UserMeDocument,
    "\n    subscription isLogged($sub_id: UUID!) {\n        watchIsLogged(subId: $sub_id)\n    }  \n": types.IsLoggedDocument,
    "\n\t\t\tquery coverImage(\n\t\t\t\t$cover_id: UUID!\n\t\t\t\t$manga_id: UUID!\n\t\t\t\t$filename: String!\n\t\t\t\t$mode: CoverImageQuality\n\t\t\t) {\n\t\t\t\tcover {\n\t\t\t\t\tgetImage(\n\t\t\t\t\t\tcoverId: $cover_id\n\t\t\t\t\t\tmangaId: $manga_id\n\t\t\t\t\t\tfilename: $filename\n\t\t\t\t\t\tmode: $mode\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t": types.CoverImageDocument,
    "\n\tquery favicon($url: Url!) {\n\t\tutils {\n\t\t\tfavicon(url: $url)\n\t\t}\n\t}\n": types.FaviconDocument,
    "\n    query getLanguageFromStr($lang: String!) {\n        utils {\n            strToLanguage(input: $lang)\n        }\n    }\n": types.GetLanguageFromStrDocument,
    "\n\t\t\t\tmutation mountAppState {\n\t\t\t\t\tofflineAppState {\n\t\t\t\t\t\tmountOfflineAppState\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t": types.MountAppStateDocument,
    "\n\t\t\t\tmutation unmountAppState {\n\t\t\t\t    offlineAppState {\n\t\t\t\t\t    unmountOfflineAppState\n\t\t\t\t    }\n\t\t\t    }\n\t\t\t": types.UnmountAppStateDocument,
    "\n\tquery getChapterPageData($id: UUID!) {\n\t\tchapter {\n\t\t\tpages(id: $id) {\n\t\t\t\tdata\n\t\t\t\tdataSaver\n\t\t\t}\n\t\t\tget(id: $id) {\n\t\t\t\tid\n\t\t\t\tattributes {\n\t\t\t\t\ttitle\n\t\t\t\t\tvolume\n\t\t\t\t\tchapter\n\t\t\t\t\tpages\n\t\t\t\t\ttranslatedLanguage\n\t\t\t\t\texternalUrl\n\t\t\t\t\treadableAt\n\t\t\t\t}\n\t\t\t\trelationships {\n\t\t\t\t\tmanga {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tscanlationGroups {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tuser {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\troles\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.GetChapterPageDataDocument,
    "\n\tsubscription subToChapterImageFit($subId: UUID!) {\n\t\twatchImageFit(subId: $subId)\n\t}\n": types.SubToChapterImageFitDocument,
    "\n\tmutation updateChapterImageFit($imageFit: ImageFit!) {\n\t\tuserOption {\n\t\t\tsetImageFit(imageFit: $imageFit)\n\t\t}\n\t}\n": types.UpdateChapterImageFitDocument,
    "\n\tsubscription subToChapterLongstripImageWidth($subId: UUID!) {\n\t\twatchLongstripImageWidth(subId: $subId)\n\t}\n": types.SubToChapterLongstripImageWidthDocument,
    "\n\tmutation updateChapterLongstripImageWidth($width: Float!) {\n\t\tuserOption {\n\t\t\tsetLongstripImageWidth(width: $width)\n\t\t}\n\t}\n": types.UpdateChapterLongstripImageWidthDocument,
    "\n\tsubscription subToChapterReadingDirection($subId: UUID!) {\n\t\twatchPageDirection(subId: $subId)\n\t}\n": types.SubToChapterReadingDirectionDocument,
    "\n\tmutation updateChapterReadingDirection($direction: Direction!) {\n\t\tuserOption {\n\t\t\tsetPageDirection(direction: $direction)\n\t\t}\n\t}\n": types.UpdateChapterReadingDirectionDocument,
    "\n\tsubscription subToChapterReadingMode($subId: UUID!) {\n\t\twatchReadingMode(subId: $subId)\n\t}\n": types.SubToChapterReadingModeDocument,
    "\n\tmutation updateChapterReadingMode($mode: ReadingMode!) {\n\t\tuserOption {\n\t\t\tsetReadingMode(mode: $mode)\n\t\t}\n\t}\n": types.UpdateChapterReadingModeDocument,
    "\n\tquery getChapterRelated($mangaId: UUID!, $langs: Language!, $groups: [UUID!]!) {\n\t\tmanga {\n\t\t\taggregate(\n\t\t\t\tparams: { groups: $groups, mangaId: $mangaId, translatedLanguage: [$langs] }\n\t\t\t) {\n\t\t\t\tdefault(isReversed: true) {\n\t\t\t\t\tvolumes {\n\t\t\t\t\t\tvolume\n\t\t\t\t\t\tchapters {\n\t\t\t\t\t\t\tchapter\n\t\t\t\t\t\t\tids\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.GetChapterRelatedDocument,
    "\n\tquery chapterPageThread($id: UUID!) {\n\t\tstatistics {\n\t\t\tchapter {\n\t\t\t\tget(id: $id) {\n\t\t\t\t\tcomments {\n\t\t\t\t\t\trepliesCount\n\t\t\t\t\t\tthreadUrl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.ChapterPageThreadDocument,
    "\n    query getMangaHihi($id: UUID!) {\n        manga {\n            get(id: $id) {\n                id\n                attributes {\n                    title\n                    altTitles\n                    state\n                    status\n                    description\n                    availableTranslatedLanguages\n                    year\n                    contentRating\n                    publicationDemographic\n                    lastVolume\n                    lastChapter\n                    latestUploadedChapter\n                    availableTranslatedLanguages\n                    originalLanguage\n                    links {\n                        hasNoLinks\n                        amazon\n                        anilist\n                        animePlanet\n                        bookWalker\n                        cdJapan\n                        ebookJapan\n                        englishTranslation\n                        kitsu\n                        mangaUpdates\n                        myAnimeList\n                        novelUpdates\n                        raw\n                    }\n                    tags {\n                        id\n                        attributes {\n                            name\n                            group\n                        }\n                    }\n                }\n                relationships {\n                    authorArtists {\n                        id\n                        attributes {\n                            name\n                        }\n                    }\n                    authors {\n                        id\n                        attributes {\n                            name\n                        }\n                    }\n                    artists {\n                        id\n                        attributes {\n                            name\n                        }\n                    }\n                    coverArt {\n                        id\n                        attributes {\n                            fileName\n                            locale\n                        }\n                    }\n                    manga {\n                        id\n                        related\n                    }\n                }\n            }\n        }\n    }\n": types.GetMangaHihiDocument,
    "\n    query mangaStatistics($id: UUID!) {\n        statistics {\n            manga {\n                get(id: $id) {\n                    comments {\n                        threadUrl\n                        repliesCount\n                    }\n                    followCount\n                    rating {\n                        bayesian\n                        distrubution {\n                            r1\n                            r2\n                            r3\n                            r4\n                            r5\n                            r6\n                            r7\n                            r8\n                            r9\n                            r10\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.MangaStatisticsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\tquery recentlyAddedHome {\n\t\t\thome {\n\t\t\t\trecentlyUploaded {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\tpages\n\t\t\t\t\t\t\ttranslatedLanguage\n\t\t\t\t\t\t\treadableAt\n\t\t\t\t\t\t\tchapter\n\t\t\t\t\t\t\tvolume\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tscanlationGroups {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmanga {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t"): (typeof documents)["\n\t\tquery recentlyAddedHome {\n\t\t\thome {\n\t\t\t\trecentlyUploaded {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\tpages\n\t\t\t\t\t\t\ttranslatedLanguage\n\t\t\t\t\t\t\treadableAt\n\t\t\t\t\t\t\tchapter\n\t\t\t\t\t\t\tvolume\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tscanlationGroups {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmanga {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\tquery homePopularTitle {\n\t\t\thome {\n\t\t\t\tpopularTitles {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\ttags {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontentRating\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tauthorArtists {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t"): (typeof documents)["\n\t\tquery homePopularTitle {\n\t\t\thome {\n\t\t\t\tpopularTitles {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\ttags {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontentRating\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tauthorArtists {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query isChapterDownloaded($id: UUID!) {\n        chapter {\n            isDownloaded(id: $id) {\n                isDownloaded\n                hasFailed\n            }\n        }\n    }\n"): (typeof documents)["\n    query isChapterDownloaded($id: UUID!) {\n        chapter {\n            isDownloaded(id: $id) {\n                isDownloaded\n                hasFailed\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    subscription watchChapterDownloadState($id: UUID!, $sub: UUID!) {\n        watchDownloadState(objectId: $id, subId: $sub) {\n            hasFailed\n            isDownloaded\n        }\n    }\n"): (typeof documents)["\n    subscription watchChapterDownloadState($id: UUID!, $sub: UUID!) {\n        watchDownloadState(objectId: $id, subId: $sub) {\n            hasFailed\n            isDownloaded\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery recentlyAddedHomeQuery {\n\t\thome {\n\t\t\trecentlyAdded(params: { limit: 15 }) {\n\t\t\t\tdata {\n\t\t\t\t\tid\n\t\t\t\t\tattributes {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t}\n\t\t\t\t\trelationships {\n\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery recentlyAddedHomeQuery {\n\t\thome {\n\t\t\trecentlyAdded(params: { limit: 15 }) {\n\t\t\t\tdata {\n\t\t\t\t\tid\n\t\t\t\t\tattributes {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t}\n\t\t\t\t\trelationships {\n\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery seasonal {\n\t\thome {\n\t\t\tseasonal {\n\t\t\t\tid\n\t\t\t\trelationships {\n\t\t\t\t\ttitles {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\taltTitles\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery seasonal {\n\t\thome {\n\t\t\tseasonal {\n\t\t\t\tid\n\t\t\t\trelationships {\n\t\t\t\t\ttitles {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\taltTitles\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelationships {\n\t\t\t\t\t\t\tcoverArt {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tfileName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query staffPicks {\n    home {\n      staffPicks {\n        id\n        relationships {\n          titles {\n            id\n            attributes {\n              title\n              altTitles\n              state\n              description\n              status\n              availableTranslatedLanguages\n            }\n            relationships {\n              coverArt {\n                id\n                attributes {\n                  fileName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query staffPicks {\n    home {\n      staffPicks {\n        id\n        relationships {\n          titles {\n            id\n            attributes {\n              title\n              altTitles\n              state\n              description\n              status\n              availableTranslatedLanguages\n            }\n            relationships {\n              coverArt {\n                id\n                attributes {\n                  fileName\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation mangaListMutation($style: MangaListStyle!) {\n        userOption {\n            setMangaListStyle(mangaListStyle: $style)\n        }\n    }\n"): (typeof documents)["\n    mutation mangaListMutation($style: MangaListStyle!) {\n        userOption {\n            setMangaListStyle(mangaListStyle: $style)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    subscription mangaListStyleSub($subId: UUID!) {\n        watchMangaListStyle(subId: $subId)\n    }\n"): (typeof documents)["\n    subscription mangaListStyleSub($subId: UUID!) {\n        watchMangaListStyle(subId: $subId)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query mangaAggregate($id: UUID!, $size: Int = 3) {\n        manga {\n            aggregate(params: {mangaId: $id}) {\n                chunked(chunkSize: $size) {\n                    ids\n                    volumes {\n                        volume\n                        count\n                        chapters {\n                            chapter\n                            count\n                            ids\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query mangaAggregate($id: UUID!, $size: Int = 3) {\n        manga {\n            aggregate(params: {mangaId: $id}) {\n                chunked(chunkSize: $size) {\n                    ids\n                    volumes {\n                        volume\n                        count\n                        chapters {\n                            chapter\n                            count\n                            ids\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMangaAggregateChapter($ids: [UUID!]!) {\n        chapter {\n            list(params: {chapterIds: $ids}) {\n                data {\n                    id\n                    attributes {\n                        title\n                        volume\n                        chapter\n                        translatedLanguage\n                        readableAt\n                    }\n                    relationships {\n                        scanlationGroups {\n                            id\n                            attributes {\n                                name\n                            }\n                        }\n                        user {\n                            id\n                            attributes {\n                                username\n                                roles\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getMangaAggregateChapter($ids: [UUID!]!) {\n        chapter {\n            list(params: {chapterIds: $ids}) {\n                data {\n                    id\n                    attributes {\n                        title\n                        volume\n                        chapter\n                        translatedLanguage\n                        readableAt\n                    }\n                    relationships {\n                        scanlationGroups {\n                            id\n                            attributes {\n                                name\n                            }\n                        }\n                        user {\n                            id\n                            attributes {\n                                username\n                                roles\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query chapterAggregateComments($ids: [UUID!]!) {\n        statistics {\n            chapter {\n                list(ids: $ids) {\n                    id\n                    comments {\n                        threadUrl\n                        repliesCount\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query chapterAggregateComments($ids: [UUID!]!) {\n        statistics {\n            chapter {\n                list(ids: $ids) {\n                    id\n                    comments {\n                        threadUrl\n                        repliesCount\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMangaCovers($id: UUID!, $offset: Int = 0, $limit: Int = 10) {\n        cover {\n            list(params: {mangaIds: [$id], offset: $offset, limit: $limit, order: {volume: ASCENDING}}) {\n                data {\n                    id\n                    attributes {\n                        description\n                        fileName\n                        volume\n                        locale\n                    }\n                }\n                total\n                offset\n                limit\n            }\n        }\n    }\n"): (typeof documents)["\n    query getMangaCovers($id: UUID!, $offset: Int = 0, $limit: Int = 10) {\n        cover {\n            list(params: {mangaIds: [$id], offset: $offset, limit: $limit, order: {volume: ASCENDING}}) {\n                data {\n                    id\n                    attributes {\n                        description\n                        fileName\n                        volume\n                        locale\n                    }\n                }\n                total\n                offset\n                limit\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getRelatedTitlesData($ids: [UUID!]!) {\n        manga {\n            list(params: {mangaIds: $ids}) {\n                data {\n                    id\n                    attributes {\n                        title\n                        status\n                        description\n                    }\n                    relationships {\n                        coverArt {\n                            id\n                            attributes {\n                                fileName\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getRelatedTitlesData($ids: [UUID!]!) {\n        manga {\n            list(params: {mangaIds: $ids}) {\n                data {\n                    id\n                    attributes {\n                        title\n                        status\n                        description\n                    }\n                    relationships {\n                        coverArt {\n                            id\n                            attributes {\n                                fileName\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\t\t\t\tquery userMeOnSidebarFooter {\n\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\tme {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t"): (typeof documents)["\n\t\t\t\t\tquery userMeOnSidebarFooter {\n\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\tme {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\t\t\troles\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\t\tsubscription serverIconState($sub_id: UUID!) {\n\t\t\t\twatchIsAppMounted(subId: $sub_id)\n\t\t\t}\n\t\t"): (typeof documents)["\n\t\t\tsubscription serverIconState($sub_id: UUID!) {\n\t\t\t\twatchIsAppMounted(subId: $sub_id)\n\t\t\t}\n\t\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    subscription rtlSidebarSub($sub_id: UUID!) {\n        watchSidebarDirection(subId: $sub_id)\n    }\n"): (typeof documents)["\n    subscription rtlSidebarSub($sub_id: UUID!) {\n        watchSidebarDirection(subId: $sub_id)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    subscription userMe($sub_id: UUID!) {\n        watchUserMe(subId: $sub_id) {\n            username\n            roles\n        }\n    }\n"): (typeof documents)["\n    subscription userMe($sub_id: UUID!) {\n        watchUserMe(subId: $sub_id) {\n            username\n            roles\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    subscription isLogged($sub_id: UUID!) {\n        watchIsLogged(subId: $sub_id)\n    }  \n"): (typeof documents)["\n    subscription isLogged($sub_id: UUID!) {\n        watchIsLogged(subId: $sub_id)\n    }  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\t\tquery coverImage(\n\t\t\t\t$cover_id: UUID!\n\t\t\t\t$manga_id: UUID!\n\t\t\t\t$filename: String!\n\t\t\t\t$mode: CoverImageQuality\n\t\t\t) {\n\t\t\t\tcover {\n\t\t\t\t\tgetImage(\n\t\t\t\t\t\tcoverId: $cover_id\n\t\t\t\t\t\tmangaId: $manga_id\n\t\t\t\t\t\tfilename: $filename\n\t\t\t\t\t\tmode: $mode\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t"): (typeof documents)["\n\t\t\tquery coverImage(\n\t\t\t\t$cover_id: UUID!\n\t\t\t\t$manga_id: UUID!\n\t\t\t\t$filename: String!\n\t\t\t\t$mode: CoverImageQuality\n\t\t\t) {\n\t\t\t\tcover {\n\t\t\t\t\tgetImage(\n\t\t\t\t\t\tcoverId: $cover_id\n\t\t\t\t\t\tmangaId: $manga_id\n\t\t\t\t\t\tfilename: $filename\n\t\t\t\t\t\tmode: $mode\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery favicon($url: Url!) {\n\t\tutils {\n\t\t\tfavicon(url: $url)\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery favicon($url: Url!) {\n\t\tutils {\n\t\t\tfavicon(url: $url)\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getLanguageFromStr($lang: String!) {\n        utils {\n            strToLanguage(input: $lang)\n        }\n    }\n"): (typeof documents)["\n    query getLanguageFromStr($lang: String!) {\n        utils {\n            strToLanguage(input: $lang)\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\t\t\tmutation mountAppState {\n\t\t\t\t\tofflineAppState {\n\t\t\t\t\t\tmountOfflineAppState\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t"): (typeof documents)["\n\t\t\t\tmutation mountAppState {\n\t\t\t\t\tofflineAppState {\n\t\t\t\t\t\tmountOfflineAppState\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\t\t\t\tmutation unmountAppState {\n\t\t\t\t    offlineAppState {\n\t\t\t\t\t    unmountOfflineAppState\n\t\t\t\t    }\n\t\t\t    }\n\t\t\t"): (typeof documents)["\n\t\t\t\tmutation unmountAppState {\n\t\t\t\t    offlineAppState {\n\t\t\t\t\t    unmountOfflineAppState\n\t\t\t\t    }\n\t\t\t    }\n\t\t\t"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery getChapterPageData($id: UUID!) {\n\t\tchapter {\n\t\t\tpages(id: $id) {\n\t\t\t\tdata\n\t\t\t\tdataSaver\n\t\t\t}\n\t\t\tget(id: $id) {\n\t\t\t\tid\n\t\t\t\tattributes {\n\t\t\t\t\ttitle\n\t\t\t\t\tvolume\n\t\t\t\t\tchapter\n\t\t\t\t\tpages\n\t\t\t\t\ttranslatedLanguage\n\t\t\t\t\texternalUrl\n\t\t\t\t\treadableAt\n\t\t\t\t}\n\t\t\t\trelationships {\n\t\t\t\t\tmanga {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tscanlationGroups {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tuser {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\troles\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery getChapterPageData($id: UUID!) {\n\t\tchapter {\n\t\t\tpages(id: $id) {\n\t\t\t\tdata\n\t\t\t\tdataSaver\n\t\t\t}\n\t\t\tget(id: $id) {\n\t\t\t\tid\n\t\t\t\tattributes {\n\t\t\t\t\ttitle\n\t\t\t\t\tvolume\n\t\t\t\t\tchapter\n\t\t\t\t\tpages\n\t\t\t\t\ttranslatedLanguage\n\t\t\t\t\texternalUrl\n\t\t\t\t\treadableAt\n\t\t\t\t}\n\t\t\t\trelationships {\n\t\t\t\t\tmanga {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tscanlationGroups {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tuser {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\tusername\n\t\t\t\t\t\t\troles\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tsubscription subToChapterImageFit($subId: UUID!) {\n\t\twatchImageFit(subId: $subId)\n\t}\n"): (typeof documents)["\n\tsubscription subToChapterImageFit($subId: UUID!) {\n\t\twatchImageFit(subId: $subId)\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation updateChapterImageFit($imageFit: ImageFit!) {\n\t\tuserOption {\n\t\t\tsetImageFit(imageFit: $imageFit)\n\t\t}\n\t}\n"): (typeof documents)["\n\tmutation updateChapterImageFit($imageFit: ImageFit!) {\n\t\tuserOption {\n\t\t\tsetImageFit(imageFit: $imageFit)\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tsubscription subToChapterLongstripImageWidth($subId: UUID!) {\n\t\twatchLongstripImageWidth(subId: $subId)\n\t}\n"): (typeof documents)["\n\tsubscription subToChapterLongstripImageWidth($subId: UUID!) {\n\t\twatchLongstripImageWidth(subId: $subId)\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation updateChapterLongstripImageWidth($width: Float!) {\n\t\tuserOption {\n\t\t\tsetLongstripImageWidth(width: $width)\n\t\t}\n\t}\n"): (typeof documents)["\n\tmutation updateChapterLongstripImageWidth($width: Float!) {\n\t\tuserOption {\n\t\t\tsetLongstripImageWidth(width: $width)\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tsubscription subToChapterReadingDirection($subId: UUID!) {\n\t\twatchPageDirection(subId: $subId)\n\t}\n"): (typeof documents)["\n\tsubscription subToChapterReadingDirection($subId: UUID!) {\n\t\twatchPageDirection(subId: $subId)\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation updateChapterReadingDirection($direction: Direction!) {\n\t\tuserOption {\n\t\t\tsetPageDirection(direction: $direction)\n\t\t}\n\t}\n"): (typeof documents)["\n\tmutation updateChapterReadingDirection($direction: Direction!) {\n\t\tuserOption {\n\t\t\tsetPageDirection(direction: $direction)\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tsubscription subToChapterReadingMode($subId: UUID!) {\n\t\twatchReadingMode(subId: $subId)\n\t}\n"): (typeof documents)["\n\tsubscription subToChapterReadingMode($subId: UUID!) {\n\t\twatchReadingMode(subId: $subId)\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation updateChapterReadingMode($mode: ReadingMode!) {\n\t\tuserOption {\n\t\t\tsetReadingMode(mode: $mode)\n\t\t}\n\t}\n"): (typeof documents)["\n\tmutation updateChapterReadingMode($mode: ReadingMode!) {\n\t\tuserOption {\n\t\t\tsetReadingMode(mode: $mode)\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery getChapterRelated($mangaId: UUID!, $langs: Language!, $groups: [UUID!]!) {\n\t\tmanga {\n\t\t\taggregate(\n\t\t\t\tparams: { groups: $groups, mangaId: $mangaId, translatedLanguage: [$langs] }\n\t\t\t) {\n\t\t\t\tdefault(isReversed: true) {\n\t\t\t\t\tvolumes {\n\t\t\t\t\t\tvolume\n\t\t\t\t\t\tchapters {\n\t\t\t\t\t\t\tchapter\n\t\t\t\t\t\t\tids\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery getChapterRelated($mangaId: UUID!, $langs: Language!, $groups: [UUID!]!) {\n\t\tmanga {\n\t\t\taggregate(\n\t\t\t\tparams: { groups: $groups, mangaId: $mangaId, translatedLanguage: [$langs] }\n\t\t\t) {\n\t\t\t\tdefault(isReversed: true) {\n\t\t\t\t\tvolumes {\n\t\t\t\t\t\tvolume\n\t\t\t\t\t\tchapters {\n\t\t\t\t\t\t\tchapter\n\t\t\t\t\t\t\tids\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery chapterPageThread($id: UUID!) {\n\t\tstatistics {\n\t\t\tchapter {\n\t\t\t\tget(id: $id) {\n\t\t\t\t\tcomments {\n\t\t\t\t\t\trepliesCount\n\t\t\t\t\t\tthreadUrl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery chapterPageThread($id: UUID!) {\n\t\tstatistics {\n\t\t\tchapter {\n\t\t\t\tget(id: $id) {\n\t\t\t\t\tcomments {\n\t\t\t\t\t\trepliesCount\n\t\t\t\t\t\tthreadUrl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getMangaHihi($id: UUID!) {\n        manga {\n            get(id: $id) {\n                id\n                attributes {\n                    title\n                    altTitles\n                    state\n                    status\n                    description\n                    availableTranslatedLanguages\n                    year\n                    contentRating\n                    publicationDemographic\n                    lastVolume\n                    lastChapter\n                    latestUploadedChapter\n                    availableTranslatedLanguages\n                    originalLanguage\n                    links {\n                        hasNoLinks\n                        amazon\n                        anilist\n                        animePlanet\n                        bookWalker\n                        cdJapan\n                        ebookJapan\n                        englishTranslation\n                        kitsu\n                        mangaUpdates\n                        myAnimeList\n                        novelUpdates\n                        raw\n                    }\n                    tags {\n                        id\n                        attributes {\n                            name\n                            group\n                        }\n                    }\n                }\n                relationships {\n                    authorArtists {\n                        id\n                        attributes {\n                            name\n                        }\n                    }\n                    authors {\n                        id\n                        attributes {\n                            name\n                        }\n                    }\n                    artists {\n                        id\n                        attributes {\n                            name\n                        }\n                    }\n                    coverArt {\n                        id\n                        attributes {\n                            fileName\n                            locale\n                        }\n                    }\n                    manga {\n                        id\n                        related\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query getMangaHihi($id: UUID!) {\n        manga {\n            get(id: $id) {\n                id\n                attributes {\n                    title\n                    altTitles\n                    state\n                    status\n                    description\n                    availableTranslatedLanguages\n                    year\n                    contentRating\n                    publicationDemographic\n                    lastVolume\n                    lastChapter\n                    latestUploadedChapter\n                    availableTranslatedLanguages\n                    originalLanguage\n                    links {\n                        hasNoLinks\n                        amazon\n                        anilist\n                        animePlanet\n                        bookWalker\n                        cdJapan\n                        ebookJapan\n                        englishTranslation\n                        kitsu\n                        mangaUpdates\n                        myAnimeList\n                        novelUpdates\n                        raw\n                    }\n                    tags {\n                        id\n                        attributes {\n                            name\n                            group\n                        }\n                    }\n                }\n                relationships {\n                    authorArtists {\n                        id\n                        attributes {\n                            name\n                        }\n                    }\n                    authors {\n                        id\n                        attributes {\n                            name\n                        }\n                    }\n                    artists {\n                        id\n                        attributes {\n                            name\n                        }\n                    }\n                    coverArt {\n                        id\n                        attributes {\n                            fileName\n                            locale\n                        }\n                    }\n                    manga {\n                        id\n                        related\n                    }\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query mangaStatistics($id: UUID!) {\n        statistics {\n            manga {\n                get(id: $id) {\n                    comments {\n                        threadUrl\n                        repliesCount\n                    }\n                    followCount\n                    rating {\n                        bayesian\n                        distrubution {\n                            r1\n                            r2\n                            r3\n                            r4\n                            r5\n                            r6\n                            r7\n                            r8\n                            r9\n                            r10\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query mangaStatistics($id: UUID!) {\n        statistics {\n            manga {\n                get(id: $id) {\n                    comments {\n                        threadUrl\n                        repliesCount\n                    }\n                    followCount\n                    rating {\n                        bayesian\n                        distrubution {\n                            r1\n                            r2\n                            r3\n                            r4\n                            r5\n                            r6\n                            r7\n                            r8\n                            r9\n                            r10\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;